(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["ldrRender1Service"] = factory();
	else
		root["ldrRender1Service"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/Index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/Index.js":
/*!**********************!*\
  !*** ./src/Index.js ***!
  \**********************/
/*! exports provided: RenderAPI, BuildAPI, ExternalAPI, MeshCollectorAPI, ColorAPI */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _external_layer_api_RenderAPI_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./external_layer/api/RenderAPI.js */ \"./src/external_layer/api/RenderAPI.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"RenderAPI\", function() { return _external_layer_api_RenderAPI_js__WEBPACK_IMPORTED_MODULE_0__; });\n/* harmony import */ var _external_layer_api_BuildAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./external_layer/api/BuildAPI.js */ \"./src/external_layer/api/BuildAPI.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"BuildAPI\", function() { return _external_layer_api_BuildAPI_js__WEBPACK_IMPORTED_MODULE_1__; });\n/* harmony import */ var _external_layer_api_ExternalAPI_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./external_layer/api/ExternalAPI.js */ \"./src/external_layer/api/ExternalAPI.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"ExternalAPI\", function() { return _external_layer_api_ExternalAPI_js__WEBPACK_IMPORTED_MODULE_2__; });\n/* harmony import */ var _external_layer_api_MeshCollectorAPI_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./external_layer/api/MeshCollectorAPI.js */ \"./src/external_layer/api/MeshCollectorAPI.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"MeshCollectorAPI\", function() { return _external_layer_api_MeshCollectorAPI_js__WEBPACK_IMPORTED_MODULE_3__; });\n/* harmony import */ var _external_layer_api_ColorAPI_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./external_layer/api/ColorAPI.js */ \"./src/external_layer/api/ColorAPI.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"ColorAPI\", function() { return _external_layer_api_ColorAPI_js__WEBPACK_IMPORTED_MODULE_4__; });\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://ldrRender1Service/./src/Index.js?");

/***/ }),

/***/ "./src/application_layer/LDRColorManager.js":
/*!**************************************************!*\
  !*** ./src/application_layer/LDRColorManager.js ***!
  \**************************************************/
/*! exports provided: LDRColorManager, getColorObject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LDRColorManager\", function() { return LDRColorManager; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getColorObject\", function() { return getColorObject; });\n/* harmony import */ var _external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../external_layer/render_engine/RenderEngineExternal.js */ \"./src/external_layer/render_engine/RenderEngineExternal.js\");\n/* harmony import */ var _colors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./colors */ \"./src/application_layer/colors.js\");\n/* harmony import */ var _LDRColorMaterials__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LDRColorMaterials */ \"./src/application_layer/LDRColorMaterials.js\");\n/* harmony import */ var _LDRVector4__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./LDRVector4 */ \"./src/application_layer/LDRVector4.js\");\n\r\n\r\n\r\n\r\n\r\nlet LDRColorManager = function () {\r\n    this.shaderColors = []; // [] => Vector4\r\n    this.highContrastShaderColors = []; // [] => Vector4\r\n    this.map = {}; // colorID -> floatColor\r\n    this.sixteen = -1;\r\n    this.edgeSixteen = -1;\r\n    this.anyTransparentColors = false;\r\n    this.mainColorIsTransparent = false;\r\n}\r\n\r\nLDRColorManager.prototype.clone = function () {\r\n    let ret = new LDRColorManager();\r\n    ret.shaderColors.push(...this.shaderColors);\r\n    ret.highContrastShaderColors.push(...this.highContrastShaderColors);\r\n    ret.sixteen = this.sixteen;\r\n    ret.edgeSixteen = this.edgeSixteen;\r\n    ret.anyTransparentColors = this.anyTransparentColors;\r\n    ret.mainColorIsTransparent = this.mainColorIsTransparent;\r\n    for (let c in this.map) {\r\n        if (this.map.hasOwnProperty(c))\r\n            ret.map[c] = this.map[c];\r\n    }\r\n    return ret;\r\n}\r\n\r\nLDRColorManager.prototype.overWrite = function (id) {\r\n    if (this.sixteen === -1 && this.edgeSixteen === -1) {\r\n        return;\r\n    }\r\n\r\n    let isEdge = id < 0;\r\n    let lowID = isEdge ? -id - 1 : id;\r\n    let colorObject = _colors__WEBPACK_IMPORTED_MODULE_1__[\"LDRColors\"][lowID];\r\n    if (!colorObject) {\r\n        throw \"Unknown color: \" + id;\r\n    }\r\n    let alpha = colorObject.alpha ? colorObject.alpha / 256.0 : 1;\r\n    this.mainColorIsTransparent = alpha < 1;\r\n\r\n    if (this.sixteen >= 0) {\r\n        let color = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Color.createWithHex(isEdge ? colorObject.edge : colorObject.value);\r\n        this.shaderColors[this.sixteen] = Object(_LDRVector4__WEBPACK_IMPORTED_MODULE_3__[\"create\"])(Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Color.getR(color), Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Color.getG(color), Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Color.getB(color), alpha);\r\n    }\r\n    if (this.edgeSixteen >= 0) {\r\n        let color = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Color.createWithHex(colorObject.edge);\r\n        this.shaderColors[this.edgeSixteen] = Object(_LDRVector4__WEBPACK_IMPORTED_MODULE_3__[\"create\"])(Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Color.getR(color), Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Color.getG(color), Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Color.getB(color), 1);// Drop alpha from edge lines to increase contrast.\r\n\r\n        this.highContrastShaderColors[this.edgeSixteen] = Object(_LDRColorMaterials__WEBPACK_IMPORTED_MODULE_2__[\"getHighContrastColor4\"])(lowID);\r\n    }\r\n\r\n    this.lastSet = id;\r\n}\r\n\r\nlet _isEdge = (id) => id < 0;\r\n\r\nlet _getLowId = (id) => _isEdge(id) ? -id - 1 : id;\r\n\r\nlet getColorObject = function (id) {\r\n    let lowID = _getLowId(id);\r\n    let colorObject = _colors__WEBPACK_IMPORTED_MODULE_1__[\"LDRColors\"][lowID];\r\n    if (!colorObject) {\r\n        throw \"Unknown color \" + lowID + \" from \" + id;\r\n    }\r\n\r\n    return colorObject;\r\n}\r\n\r\nLDRColorManager.prototype.get = function (id) {\r\n    let f = this.map[id];\r\n    if (f) {\r\n        return f;\r\n    }\r\n    if (id == 16) {\r\n        this.sixteen = this.shaderColors.length;\r\n    }\r\n    else if (id == 10016 || id == 24) {\r\n        this.edgeSixteen = this.shaderColors.length;\r\n    }\r\n\r\n    let colorObject = getColorObject(id);\r\n\r\n    let color = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Color.createWithHex(_isEdge(id) ? colorObject.edge : colorObject.value);\r\n    let alpha = colorObject.alpha ? colorObject.alpha / 256.0 : 1;\r\n    this.anyTransparentColors = (this.anyTransparentColors || (alpha < 1))\r\n\r\n    f = this.shaderColors.length + 0.1;\r\n    this.map[id] = f;\r\n    this.shaderColors.push(Object(_LDRVector4__WEBPACK_IMPORTED_MODULE_3__[\"create\"])(Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Color.getR(color), Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Color.getG(color), Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Color.getB(color), alpha));\r\n    this.highContrastShaderColors.push(Object(_LDRColorMaterials__WEBPACK_IMPORTED_MODULE_2__[\"getHighContrastColor4\"])(_getLowId(id)));\r\n    return f;\r\n}\r\n\r\n\r\nLDRColorManager.prototype.containsTransparentColors = function () {\r\n    return this.anyTransparentColors || this.mainColorIsTransparent;\r\n}\n\n//# sourceURL=webpack://ldrRender1Service/./src/application_layer/LDRColorManager.js?");

/***/ }),

/***/ "./src/application_layer/LDRColorMaterials.js":
/*!****************************************************!*\
  !*** ./src/application_layer/LDRColorMaterials.js ***!
  \****************************************************/
/*! exports provided: getHighContrastColor4, isTrans, buildLineMaterial, buildTriangleMaterial */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getHighContrastColor4\", function() { return getHighContrastColor4; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isTrans\", function() { return isTrans; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildLineMaterial\", function() { return buildLineMaterial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildTriangleMaterial\", function() { return buildTriangleMaterial; });\n/* harmony import */ var _colors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./colors */ \"./src/application_layer/colors.js\");\n/* harmony import */ var _LDRShaders__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LDRShaders */ \"./src/application_layer/LDRShaders.js\");\n/* harmony import */ var _external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../external_layer/render_engine/RenderEngineExternal.js */ \"./src/external_layer/render_engine/RenderEngineExternal.js\");\n/* harmony import */ var _LDRVector4__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./LDRVector4 */ \"./src/application_layer/LDRVector4.js\");\n/* harmony import */ var _LDRColorManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./LDRColorManager */ \"./src/application_layer/LDRColorManager.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nlet canBeOld = false;\r\n\r\nlet ColorMaterialIdx = 0;\r\n\r\n\r\nlet getHighContrastColor4 = function (colorID) {\r\n    if (colorID === 0 || colorID === 256 || colorID === 64 || colorID === 32 || colorID === 83) {\r\n        return Object(_LDRVector4__WEBPACK_IMPORTED_MODULE_3__[\"create\"])(1, 1, 1, 1);\r\n    }\r\n    else if (colorID === 272 || colorID === 70) {\r\n        return Object(_LDRVector4__WEBPACK_IMPORTED_MODULE_3__[\"create\"])(1, 0, 0, 1);\r\n    }\r\n    else {\r\n        return Object(_LDRVector4__WEBPACK_IMPORTED_MODULE_3__[\"create\"])(0, 0, 0, 1);\r\n    }\r\n}\r\n\r\n\r\nlet isTrans = function (colorID) {\r\n    return Object(_LDRColorManager__WEBPACK_IMPORTED_MODULE_4__[\"getColorObject\"])(colorID).alpha > 0;\r\n}\r\n\r\n\r\nlet buildLineMaterial = function (colorManager, color, conditional) {\r\n    colorManager = colorManager.clone();\r\n    colorManager.overWrite(color);\r\n    colorManager.idMaterial = ColorMaterialIdx++;\r\n\r\n    // let colors = (LDR.Options && LDR.Options.lineContrast === 0) ?\r\n    //   colorManager.highContrastShaderColors : colorManager.shaderColors;\r\n    let colors = colorManager.shaderColors;\r\n\r\n    let len = colors.length;\r\n\r\n    let uniforms = {};\r\n    if (canBeOld) {\r\n        uniforms['old'] = { value: false };\r\n    }\r\n    if (len > 1) {\r\n        uniforms['colors'] = { type: 'v4v', value: colors };\r\n    }\r\n    else {\r\n        uniforms['color'] = { type: 'v4', value: colors[0] };\r\n    }\r\n    let ret = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_2__[\"getExternal\"])().RawShaderMaterial.createLineMaterial({\r\n        uniforms: uniforms,\r\n        vertexShader: (conditional ?\r\n            Object(_LDRShaders__WEBPACK_IMPORTED_MODULE_1__[\"createConditionalVertexShader\"])(canBeOld, colors, true) :\r\n            // LDR.Shader.createSimpleVertexShader(canBeOld, colors, true, true, false)),\r\n            Object(_LDRShaders__WEBPACK_IMPORTED_MODULE_1__[\"createSimpleVertexShader\"])(canBeOld, colors, true, true)),\r\n        fragmentShader: (conditional ?\r\n            _LDRShaders__WEBPACK_IMPORTED_MODULE_1__[\"AlphaTestFragmentShader\"] :\r\n            _LDRShaders__WEBPACK_IMPORTED_MODULE_1__[\"SimpleFragmentShader\"]),\r\n        transparent: false,\r\n        visible: true,\r\n        polygonOffset: false,\r\n    });\r\n    // ret.colorManager = colorManager;\r\n    return ret;\r\n}\r\n\r\n\r\n// LDRColors.buildTriangleMaterial = function (colorManager, color, texmap) {\r\nlet buildTriangleMaterial = function (colorManager, color) {\r\n    colorManager = colorManager.clone();\r\n    colorManager.overWrite(color);\r\n    let colors = colorManager.shaderColors;\r\n    let len = colors.length;\r\n\r\n    let uniforms = {};\r\n    if (canBeOld) {\r\n        uniforms['old'] = { value: false };\r\n    }\r\n    if (len > 1) {\r\n        uniforms['colors'] = { type: 'v4v', value: colors };\r\n    }\r\n    else {\r\n        uniforms['color'] = { type: 'v4', value: colors[0] };\r\n    }\r\n    // if (texmap && texmap !== true) {\r\n    //     uniforms['map'] = { type: 't', value: texmap };\r\n    // }\r\n\r\n    let isTrans = colorManager.containsTransparentColors();\r\n\r\n    let ret = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_2__[\"getExternal\"])().RawShaderMaterial.createTriangleMaterial({\r\n        uniforms: uniforms,\r\n        // vertexShader: LDR.Shader.createSimpleVertexShader(canBeOld, colors, false, false, texmap),\r\n        vertexShader: Object(_LDRShaders__WEBPACK_IMPORTED_MODULE_1__[\"createSimpleVertexShader\"])(canBeOld, colors, false, false),\r\n        // fragmentShader: texmap ? LDR.Shader.TextureFragmentShader : LDR.Shader.SimpleFragmentShader,\r\n        fragmentShader: _LDRShaders__WEBPACK_IMPORTED_MODULE_1__[\"SimpleFragmentShader\"],\r\n        transparent: isTrans,\r\n        depthWrite: !isTrans,\r\n        polygonOffset: true,\r\n        polygonOffsetFactor: 0.5,\r\n        polygonOffsetUnits: 0.1\r\n    });\r\n    return ret;\r\n}\n\n//# sourceURL=webpack://ldrRender1Service/./src/application_layer/LDRColorMaterials.js?");

/***/ }),

/***/ "./src/application_layer/LDRGeometry.js":
/*!**********************************************!*\
  !*** ./src/application_layer/LDRGeometry.js ***!
  \**********************************************/
/*! exports provided: EPS, mergeGeometries, vertexSorter, vertexLessThan, vertexEqual, LDRGeometry */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EPS\", function() { return EPS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mergeGeometries\", function() { return mergeGeometries; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"vertexSorter\", function() { return vertexSorter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"vertexLessThan\", function() { return vertexLessThan; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"vertexEqual\", function() { return vertexEqual; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LDRGeometry\", function() { return LDRGeometry; });\n/* harmony import */ var _external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../external_layer/render_engine/RenderEngineExternal.js */ \"./src/external_layer/render_engine/RenderEngineExternal.js\");\n/* harmony import */ var _LDRColorManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LDRColorManager */ \"./src/application_layer/LDRColorManager.js\");\n/* harmony import */ var _LDRVector3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LDRVector3 */ \"./src/application_layer/LDRVector3.js\");\n/* harmony import */ var _LDRMatrix3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./LDRMatrix3 */ \"./src/application_layer/LDRMatrix3.js\");\n/* harmony import */ var _LDRMatrix4__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./LDRMatrix4 */ \"./src/application_layer/LDRMatrix4.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet EPS = 1e-5;\r\n\r\n/*\r\n  Binary merge of the geometry streams.\r\n */\r\nlet mergeGeometries = function (geometries) {\r\n    if (geometries.length === 0) {\r\n        return new LDRGeometry();\r\n    }\r\n    while (geometries.length > 1) { // Repeat rounds until only 1 left:\r\n        let nextGeometries = []; // Result of round.\r\n\r\n        if (geometries.length % 2 === 1) {\r\n            nextGeometries.push(geometries[geometries.length - 1]); // Take last geometry without merging it.\r\n        }\r\n\r\n        for (let i = 0; i < geometries.length - 1; i += 2) {\r\n            geometries[i].merge(geometries[i + 1]);\r\n            nextGeometries.push(geometries[i]);\r\n        }\r\n        geometries = nextGeometries;\r\n    }\r\n    return geometries[0];\r\n}\r\n\r\n/*\r\n  A vertex is sorted by {x,y,z,c}.\r\n */\r\nlet vertexSorter = function (a, b) {\r\n    if (a.x !== b.x) {\r\n        return a.x - b.x;\r\n    }\r\n    if (a.y !== b.y) {\r\n        return a.y - b.y;\r\n    }\r\n    return a.z - b.z;\r\n}\r\n\r\nlet vertexLessThan = function (a, b) {\r\n    if (a.x !== b.x) {\r\n        return a.x < b.x;\r\n    }\r\n    if (a.y !== b.y) {\r\n        return a.y < b.y;\r\n    }\r\n    return a.z < b.z;\r\n}\r\n\r\nlet vertexEqual = function (a, b) {\r\n    return Math.abs(a.x - b.x) < EPS &&\r\n        Math.abs(a.y - b.y) < EPS &&\r\n        Math.abs(a.z - b.z) < EPS;\r\n}\r\n\r\nlet LDRGeometry = function () {\r\n    this.vertices = []; // Sorted (x,y,z,o), where 'o' is a LEGO-logo indicator.\r\n    this.lines = {}; // c -> [{p1,p2},...] (color -> indices)\r\n    this.conditionalLines = {}; // c -> [{p1,p2,p3,p4},...]\r\n    this.triangles = {}; // c -> [{p1,p2,p3},...]\r\n    this.triangles2 = {}; // Triangles without culling\r\n    this.quads = {}; // c -> [{p1,p2,p3,p4},...]\r\n    this.quads2 = {}; // Quads without culling.\r\n    // geometries:\r\n    this.lineColorManager;\r\n    this.lineGeometry;\r\n    this.triangleGeometries = {}; // c -> geometry\r\n    // this.texmapGeometries = {}; // texmapID -> [{c,g}] Populated with one geometry pr TEXMAP START command.\r\n    this.conditionalLineGeometry;\r\n    this.geometriesBuilt = false;\r\n    this.boundingBox = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().BoundingBox3.create();\r\n}\r\n\r\n// /*\r\n//   Used for showing points where all vertices are.\r\n//  */\r\n// LDRGeometry.prototype.buildVertexAttribute = function (r) {\r\n//     let vertices = [];\r\n//     this.vertices.forEach(v => {\r\n//         let p = new THREE.Vector3(v.x, v.y, v.z);\r\n//         p.applyMatrix3(r);\r\n//         vertices.push(p.x, p.y, p.z);\r\n//     });\r\n//     return new THREE.Float32BufferAttribute(vertices, 3);\r\n// }\r\n\r\nLDRGeometry.prototype.buildGeometriesAndColorsForLines = function () {\r\n    this.lineColorManager = new _LDRColorManager__WEBPACK_IMPORTED_MODULE_1__[\"LDRColorManager\"]();\r\n\r\n    // Vertices for the geometries have size 3 for single color geometries and size 4 for multi-colored (they include color indices as fourth component):\r\n    // First handle line vertices:\r\n    let allLineColors = [];\r\n    for (let c in this.lines) {\r\n        if (this.lines.hasOwnProperty(c)) {\r\n            allLineColors.push(c);\r\n        }\r\n    }\r\n    for (let c in this.conditionalLines) {\r\n        if (!this.lines.hasOwnProperty(c) && this.conditionalLines.hasOwnProperty(c)) {\r\n            allLineColors.push(c);\r\n        }\r\n    }\r\n\r\n    var self = this;\r\n    let colorIdx = 0;\r\n    let handleVertex = function (vertices, idx, fc) {\r\n        let v = self.vertices[idx];\r\n        if (v.c !== colorIdx) {\r\n            v.c = colorIdx;\r\n            v.idx = vertices.length / 4;\r\n            vertices.push(v.x, v.y, v.z, fc);\r\n        }\r\n        return v.idx;\r\n    }\r\n\r\n    let lineVertexAttribute, lineVertices = [], lineIndices = [];\r\n    if (allLineColors.length === 1) {\r\n        let c = allLineColors[0];\r\n        this.lineColorManager.get(c); // Ensure color is present.\r\n        this.vertices.forEach(v => lineVertices.push(v.x, v.y, v.z));\r\n        lineVertexAttribute = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Geometry.createFloat32BufferAttribute(lineVertices, 3);\r\n        // No need to update indices of lines.\r\n        if (this.lines.hasOwnProperty(c)) {\r\n            this.lines[c].forEach(line => lineIndices.push(line.p1, line.p2));\r\n        }\r\n    }\r\n    else if (allLineColors.length > 1) {\r\n        /*\r\n          Duplicate vertices for each color.\r\n         */\r\n        for (let c in this.lines) {\r\n            colorIdx++;\r\n            if (!this.lines.hasOwnProperty(c)) {\r\n                continue;\r\n            }\r\n            let fc = this.lineColorManager.get(c);\r\n\r\n            this.lines[c].forEach(line => {\r\n                lineIndices.push(handleVertex(lineVertices, line.p1, fc)); // Update indices\r\n                lineIndices.push(handleVertex(lineVertices, line.p2, fc));\r\n            });\r\n        }\r\n        lineVertexAttribute = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Geometry.createFloat32BufferAttribute(lineVertices, 4);\r\n    }\r\n    this.lineGeometry = this.buildGeometry(lineIndices, lineVertexAttribute);\r\n\r\n    // Conditional lines:\r\n    let conditionalLines = [];\r\n    for (let c in this.conditionalLines) {\r\n        if (!this.conditionalLines.hasOwnProperty(c)) {\r\n            continue;\r\n        }\r\n        let fc = this.lineColorManager.get(c);\r\n        this.conditionalLines[c].forEach(p => {\r\n            let p1 = this.vertices[p.p1];\r\n            let p2 = this.vertices[p.p2];\r\n            let p3 = this.vertices[p.p3];\r\n            let p4 = this.vertices[p.p4];\r\n            conditionalLines.push({ p1: p1, p2: p2, p3: p3, p4: p4, fc: fc });\r\n        });\r\n    }\r\n    this.buildGeometryForConditionalLines(allLineColors.length > 1, conditionalLines);\r\n}\r\n\r\n/*\r\n  Build geometries and color managers for standard (quick draw) drawing (seen in building instructions and parts lists)\r\n */\r\nLDRGeometry.prototype.buildGeometriesAndColors = function () {\r\n    if (this.geometriesBuilt) {\r\n        return; // Already built.\r\n    }\r\n    let self = this;\r\n    this.buildGeometriesAndColorsForLines();\r\n\r\n    // Now handle triangle colors and vertices:\r\n    let allTriangleColors = [];\r\n    let seen = {};\r\n    function getColorsFrom(p) {\r\n        for (let c in p) {\r\n            if (!seen.hasOwnProperty(c) && p.hasOwnProperty(c)) {\r\n                allTriangleColors.push(c);\r\n                seen[c] = true;\r\n            }\r\n        }\r\n    }\r\n    getColorsFrom(this.triangles);\r\n    getColorsFrom(this.triangles2);\r\n    getColorsFrom(this.quads);\r\n    getColorsFrom(this.quads2);\r\n\r\n    let colorIdx = -1;\r\n    allTriangleColors.forEach(c => {\r\n        let triangleVertices = [], triangleIndices = [];\r\n        colorIdx--;\r\n        let tvIdx = 0;\r\n\r\n        let hv = function (idx) { // Handle vertex:\r\n            let v = self.vertices[idx];\r\n            if (v.c !== colorIdx) { // Not already seen for this color.\r\n                v.c = colorIdx;\r\n                v.idx = tvIdx++;\r\n                triangleVertices.push(v.x, v.y, v.z);\r\n            }\r\n            return v.idx;\r\n        }\r\n\r\n        function handlePrimitives(ps, f) {\r\n            if (ps.hasOwnProperty(c)) {\r\n                ps[c].filter(p => !p.t).forEach(f);\r\n            }\r\n        }\r\n        handlePrimitives(self.triangles, t => triangleIndices.push(hv(t.p1), hv(t.p2), hv(t.p3)));\r\n        handlePrimitives(self.triangles2, t => { let i1 = hv(t.p1), i2 = hv(t.p2), i3 = hv(t.p3); triangleIndices.push(i1, i2, i3, i3, i2, i1); });\r\n        handlePrimitives(self.quads, q => { let i1 = hv(q.p1), i2 = hv(q.p2), i3 = hv(q.p3), i4 = hv(q.p4); triangleIndices.push(i1, i2, i4, i2, i3, i4); });\r\n        handlePrimitives(self.quads2, q => { let i1 = hv(q.p1), i2 = hv(q.p2), i3 = hv(q.p3), i4 = hv(q.p4); triangleIndices.push(i1, i2, i4, i2, i3, i4, i4, i3, i2, i4, i2, i1); });\r\n\r\n        let triangleVertexAttribute = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Geometry.createFloat32BufferAttribute(triangleVertices, 3);\r\n        let triangleGeometry = this.buildGeometry(triangleIndices, triangleVertexAttribute);\r\n        if (triangleGeometry) {\r\n            this.triangleGeometries[c] = triangleGeometry;\r\n        }\r\n    });\r\n\r\n    // // Handle texmap geometries:\r\n    // allTriangleColors.forEach(c => self.buildTexmapGeometriesForColor(c));\r\n\r\n    this.geometriesBuilt = true;\r\n}\r\n\r\n// LDRGeometry.prototype.buildTexmapGeometriesForColor = function (c) {\r\n//     let self = this;\r\n\r\n//     let texmapped = {}; // idx => [{p,size,noBFC}]\r\n//     function check(ps, q, noBFC) {\r\n//         if (!ps.hasOwnProperty(c)) {\r\n//             return;\r\n//         }\r\n//         ps[c].filter(p => p.t).forEach(p => {\r\n//             if (!texmapped.hasOwnProperty(p.t.idx)) {\r\n//                 texmapped[p.t.idx] = [];\r\n//             }\r\n//             texmapped[p.t.idx].push({ p: p, q: q, noBFC: noBFC });\r\n//         });\r\n//     }\r\n//     check(self.triangles, false, false);\r\n//     check(self.triangles2, false, true);\r\n//     check(self.quads, true, false);\r\n//     check(self.quads2, true, true);\r\n\r\n//     for (let idx in texmapped) {\r\n//         if (!texmapped.hasOwnProperty(idx)) {\r\n//             return;\r\n//         }\r\n//         let primitiveList = texmapped[idx];\r\n\r\n//         // Build indexed geometry for the texture:\r\n//         let vertices = []; // x 3\r\n//         let indices = []; // x 1\r\n//         let uvs = []; // x 2\r\n//         let indexMap = {}; // original index -> new index\r\n\r\n//         //let uvs = new Float32Array(triangleVertices.length*2); // TODO!\r\n\r\n//         // Compute ps and uvs:\r\n//         let texmapPlacement;\r\n//         function set(a, b, c) {\r\n//             let vertex = self.vertices[a];\r\n//             let [u, v] = texmapPlacement.getUV(vertex, self.vertices[b], self.vertices[c]);\r\n\r\n//             if (indexMap.hasOwnProperty(a)) {\r\n//                 let idx = indexMap[a];\r\n//                 // Check UV:\r\n//                 let oldU = uvs[2 * idx], oldV = uvs[2 * idx + 1];\r\n//                 /*if(oldU === u && oldV === v) { TODO!\r\n//                     indices.push(idx);\r\n//                     return;\r\n//                     } TODO */\r\n//             }\r\n\r\n//             let idx = indices.length;\r\n//             indexMap[a] = idx;\r\n//             vertices.push(vertex.x, vertex.y, vertex.z);\r\n//             indices.push(idx);\r\n//             uvs.push(u, v);\r\n//         }\r\n//         function setAll(a, b, c) {\r\n//             set(a, b, c);\r\n//             set(b, a, c);\r\n//             set(c, a, b);\r\n//         }\r\n//         primitiveList.forEach(ele => {\r\n//             let p = ele.p, q = ele.q, noBFC = ele.noBFC;\r\n//             texmapPlacement = p.t;\r\n\r\n//             setAll(p.p1, p.p2, p.p3);\r\n//             if (noBFC) {\r\n//                 setAll(p.p3, p.p2, p.p1);\r\n//             }\r\n//             if (q) { // Quad:\r\n//                 setAll(p.p1, p.p3, p.p4);\r\n//                 if (noBFC) {\r\n//                     setAll(p.p4, p.p3, p.p1);\r\n//                 }\r\n//             }\r\n//         });\r\n\r\n//         let g = self.buildGeometry(indices, new THREE.Float32BufferAttribute(vertices, 3));\r\n//         g.computeVertexNormals(); // Also normalizes.\r\n\r\n//         g.setAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));\r\n//         if (!self.texmapGeometries.hasOwnProperty(texmapPlacement.idx)) {\r\n//             self.texmapGeometries[texmapPlacement.idx] = [];\r\n//         }\r\n//         self.texmapGeometries[texmapPlacement.idx].push({ c: c, g: g });\r\n//     }\r\n// }\r\n\r\n// Optimized version of the one found in https://github.com/mrdoob/three.js/blob/master/src/core/BufferGeometry.js\r\n// THREE.BufferGeometry.prototype.computeVertexNormals = function () {\r\n//     var attributes = this.attributes;\r\n//     var positions = attributes.position.array;\r\n\r\n//     this.setAttribute('normal', new THREE.BufferAttribute(new Float32Array(positions.length), 3));\r\n//     var normals = attributes.normal.array;\r\n\r\n//     var vA, vB, vC;\r\n//     var pA = new THREE.Vector3(), pB = new THREE.Vector3(), pC = new THREE.Vector3();\r\n//     var cb = new THREE.Vector3(), ab = new THREE.Vector3();\r\n\r\n//     var index = this.index;\r\n//     var indices = index.array;\r\n//     for (var i = 0, il = index.count; i < il; i += 3) {\r\n//         vA = indices[i] * 3;\r\n//         vB = indices[i + 1] * 3;\r\n//         vC = indices[i + 2] * 3;\r\n\r\n//         pA.fromArray(positions, vA);\r\n//         pB.fromArray(positions, vB);\r\n//         pC.fromArray(positions, vC);\r\n\r\n//         cb.subVectors(pC, pB);\r\n//         ab.subVectors(pA, pB);\r\n//         cb.cross(ab);\r\n\r\n//         normals[vA] += cb.x;\r\n//         normals[vA + 1] += cb.y;\r\n//         normals[vA + 2] += cb.z;\r\n\r\n//         normals[vB] += cb.x;\r\n//         normals[vB + 1] += cb.y;\r\n//         normals[vB + 2] += cb.z;\r\n\r\n//         normals[vC] += cb.x;\r\n//         normals[vC + 1] += cb.y;\r\n//         normals[vC + 2] += cb.z;\r\n//     }\r\n//     this.normalizeNormals();\r\n//     attributes.normal.needsUpdate = true;\r\n// }\r\n\r\n/**\r\n   This function also computes normals and UV's to be used by standard materials.\r\n */\r\n// LDRGeometry.UV_WarningWritten = false;\r\n// LDRGeometry.prototype.buildPhysicalGeometriesAndColors = function () {\r\n//     if (this.geometriesBuilt) {\r\n//         return;\r\n//     }\r\n\r\n//     var self = this;\r\n//     let vertices = this.vertices;\r\n//     let vLen = vertices.length;\r\n//     const VLEN = vLen;\r\n//     let key = (a, b) => (a < b) ? (a * VLEN + b) : (b * VLEN + a);\r\n\r\n//     // Find bounds:\r\n//     let b = new THREE.Box3();\r\n//     vertices.forEach(v => b.expandByPoint(v));\r\n//     let size = new THREE.Vector3();\r\n//     b.getSize(size);\r\n\r\n//     // Mark lines shared by lines and conditional lines:\r\n//     let edges = []; // 0/1 => soft, 2 => hard\r\n//     for (let c in this.conditionalLines) {\r\n//         if (this.conditionalLines.hasOwnProperty(c)) {\r\n//             let lines = this.conditionalLines[c];\r\n//             lines.forEach(line => edges[key(line.p1, line.p2)] = true);\r\n//         }\r\n//     }\r\n//     for (let c in this.lines) {\r\n//         if (this.lines.hasOwnProperty(c)) {\r\n//             let lines = this.lines[c];\r\n//             lines.forEach(line => vertices[line.p1].hard = vertices[line.p2].hard = true);\r\n//             lines.forEach(line => edges[key(line.p1, line.p2)] = false); // This fixes duplicate soft and hard edges.\r\n//         }\r\n//     }\r\n\r\n//     // Now handle triangle colors and vertices:\r\n//     let allTriangleColors = [];\r\n//     let seenColors = {};\r\n//     function getColorsFrom(p) {\r\n//         for (let c in p) {\r\n//             if (!seenColors.hasOwnProperty(c) && p.hasOwnProperty(c)) {\r\n//                 allTriangleColors.push(c);\r\n//                 seenColors[c] = true;\r\n//             }\r\n//         }\r\n//     }\r\n//     getColorsFrom(this.triangles);\r\n//     getColorsFrom(this.triangles2);\r\n//     getColorsFrom(this.quads);\r\n//     getColorsFrom(this.quads2);\r\n\r\n//     function renew(i) {\r\n//         let v = vertices[i];\r\n//         vertices.push({ x: v.x, y: v.y, z: v.z }); // No mark as it is new and will not be visited again.\r\n//         vLen++;\r\n//         return vLen - 1;\r\n//     }\r\n\r\n//     function updateTriangleIndices(t) {\r\n//         let p1 = t.p1, p2 = t.p2, p3 = t.p3;\r\n//         let h1 = vertices[p1].hard, h2 = vertices[p2].hard, h3 = vertices[p3].hard;\r\n//         let k12 = edges[key(p1, p2)], k23 = edges[key(p2, p3)], k31 = edges[key(p3, p1)];\r\n\r\n//         if (h1 && !k12 && !k31) {\r\n//             t.p1 = renew(t.p1);\r\n//         }\r\n//         if (h2 && !k12 && !k23) {\r\n//             t.p2 = renew(t.p2);\r\n//         }\r\n//         if (h3 && !k23 && !k31) {\r\n//             t.p3 = renew(t.p3);\r\n//         }\r\n//     }\r\n\r\n//     function updateQuadIndices(t) {\r\n//         let p1 = t.p1, p2 = t.p2, p3 = t.p3, p4 = t.p4;\r\n//         let h1 = vertices[p1].hard, h2 = vertices[p2].hard, h3 = vertices[p3].hard, h4 = vertices[p4].hard;\r\n//         let k12 = edges[key(p1, p2)], k23 = edges[key(p2, p3)], k34 = edges[key(p3, p4)], k41 = edges[key(p4, p1)];\r\n\r\n//         if (h1 && !k12 && !k41) {\r\n//             t.p1 = renew(t.p1);\r\n//         }\r\n//         if (h2 && !k12 && !k23) {\r\n//             t.p2 = renew(t.p2);\r\n//         }\r\n//         if (h3 && !k23 && !k34) {\r\n//             t.p3 = renew(t.p3);\r\n//         }\r\n//         if (h4 && !k41 && !k34) {\r\n//             t.p4 = renew(t.p4);\r\n//         }\r\n//     }\r\n\r\n//     allTriangleColors.forEach(c => {\r\n//         if (self.triangles.hasOwnProperty(c)) {\r\n//             self.triangles[c].forEach(updateTriangleIndices);\r\n//         }\r\n//         if (self.triangles2.hasOwnProperty(c)) {\r\n//             self.triangles2[c].forEach(updateTriangleIndices);\r\n//         }\r\n//         if (self.quads.hasOwnProperty(c)) {\r\n//             self.quads[c].forEach(updateQuadIndices);\r\n//         }\r\n//         if (self.quads2.hasOwnProperty(c)) {\r\n//             self.quads2[c].forEach(updateQuadIndices);\r\n//         }\r\n//     });\r\n\r\n//     let triangleVertices = [];\r\n//     vertices.forEach(v => triangleVertices.push(v.x, v.y, v.z));\r\n//     let triangleVertexAttribute = new THREE.Float32BufferAttribute(triangleVertices, 3);\r\n\r\n//     allTriangleColors.forEach(c => {\r\n//         let triangleIndices = [];\r\n\r\n//         function pushT(a, b, c) {\r\n//             triangleIndices.push(a, b, c);\r\n//         }\r\n//         function pushQ(a, b, c, d) {\r\n//             triangleIndices.push(a, b, d);\r\n//             triangleIndices.push(b, c, d);\r\n//         }\r\n\r\n//         let triangles = self.triangles.hasOwnProperty(c) ? self.triangles[c].filter(p => !p.t) : [];\r\n//         let triangles2 = self.triangles2.hasOwnProperty(c) ? self.triangles2[c].filter(p => !p.t) : [];\r\n//         let quads = self.quads.hasOwnProperty(c) ? self.quads[c].filter(p => !p.t) : [];\r\n//         let quads2 = self.quads2.hasOwnProperty(c) ? self.quads2[c].filter(p => !p.t) : [];\r\n\r\n//         triangles.forEach(t => pushT(t.p1, t.p2, t.p3));\r\n//         triangles2.forEach(t => { pushT(t.p1, t.p2, t.p3); pushT(t.p3, t.p2, t.p1); });\r\n//         quads.forEach(q => pushQ(q.p1, q.p2, q.p3, q.p4));\r\n//         quads2.forEach(q => { pushQ(q.p1, q.p2, q.p3, q.p4); pushQ(q.p4, q.p3, q.p2, q.p1); });\r\n\r\n//         if (triangleIndices.length === 0) {\r\n//             return; // None in color.\r\n//         }\r\n\r\n//         let g = self.buildGeometry(triangleIndices, triangleVertexAttribute); // TODO: Split vertexattribute by color! - compare performance!\r\n//         g.computeVertexNormals(); // Also normalizes.\r\n\r\n//         /* \r\n//            Compute UV's:\r\n//            The heuristic for computing UV's has to translate from\r\n//            3D space x 3D space (Positions and normals) to 2D (UV's)\r\n\r\n//            The heuristic performs this reduction as follows:\r\n//            0) If 3 or more normals point the same way, then project to one of the rectilinear planes and return.\r\n//            1) The sum of normals N is computed.\r\n//            2) Let v and n denote the position and normal of a point. UV is computed:\r\n//               U = v.x + planar_angle_of(n.x, n.z)\r\n//               V = v.z + acos(n.y)\r\n//            *) If |N.y| >= MAX(|N.x|, |N.z|) then perform UV calculation using XY instead of XZ above.\r\n//          */\r\n//         let normals = g.getAttribute('normal').array;\r\n//         let uvs = [];\r\n//         for (let i = 0; i < vLen; i++) {\r\n//             uvs.push(0, 0);\r\n//         }\r\n//         let dx = v => (v.x - b.min.x) / size.x;\r\n//         let dy = v => (v.y - b.min.y) / size.y;\r\n//         let dz = v => (v.z - b.min.z) / size.z;\r\n//         let [UVU, UVV] = [[0.5, 0.5], [0, 0], [0.5, 0]][Math.floor(Math.random() * 3)]; // Which of the 3 cells to use for the UV mapping (not 1,1 with the LEGO logo)\r\n\r\n//         function setUVs(indices) {\r\n//             const len = indices.length;\r\n//             let maxDiff = xs => xs.map((x, idx, a) => Math.abs(x - a[idx === 0 ? len - 1 : idx - 1])).reduce((a, b) => a > b ? a : b, 0);\r\n//             let vs = indices.map(i => vertices[i]);\r\n//             let ns = indices.map(i => 3 * i).map(idx => new THREE.Vector3(normals[idx], normals[1 + idx], normals[2 + idx]));\r\n//             let N = ns.reduce((a, b) => new THREE.Vector3(a.x + b.x, a.y + b.y, a.z + b.z), new THREE.Vector3());\r\n//             let NX = N.x * N.x, NY = N.y * N.y, NZ = N.z * N.z;\r\n\r\n//             function setUV(fu, fv, force) {\r\n//                 let ret = vs.map((v, i) => { return { u: fu(v, i), v: fv(v, i) }; });\r\n\r\n//                 if (!force) {\r\n//                     let prevprev = ret[ret.length - 2];\r\n//                     let prev = ret[ret.length - 1];\r\n//                     let turn = uv => (prev.u - prevprev.u) * (uv.v - prevprev.v) - (prev.v - prevprev.v) * (uv.u - prevprev.u);\r\n//                     for (let i = 0; i < ret.length; i++) {\r\n//                         let uv = ret[i];\r\n//                         if (Math.abs(prev.u - uv.u) < EPS && Math.abs(prev.v - uv.v) < EPS ||\r\n//                             Math.abs(prevprev.u - uv.u) < EPS && Math.abs(prevprev.v - uv.v) < EPS ||\r\n//                             Math.abs(turn(uv)) < 1e-7) {\r\n//                             if (!LDRGeometry.UV_WarningWritten) {\r\n//                                 console.log('UV issue insights for debugging. Underlying data points (vertices and normals):');\r\n//                                 console.dir(vs);\r\n//                                 console.dir(ns);\r\n//                                 console.dir('Computed U`s:');\r\n//                                 console.dir(ret);\r\n//                                 console.dir('Turn angle check at failure: ' + turn(uv));\r\n//                                 console.warn(\"Degenerate UV! \" + uv.u + ', ' + uv.v);\r\n//                                 LDRGeometry.UV_WarningWritten = true;\r\n//                             }\r\n//                             return false;\r\n//                         }\r\n//                         prevprev = prev;\r\n//                         prev = uv;\r\n//                     }\r\n//                 }\r\n\r\n//                 ret.forEach((uv, i) => {\r\n//                     let idx = 2 * indices[i];\r\n//                     uvs[idx] = 0.5 * uv.u + UVU;\r\n//                     uvs[idx + 1] = 0.5 * uv.v + UVV;\r\n//                 });\r\n\r\n//                 return true;\r\n//             }\r\n\r\n//             // Check if at least 3 normals point the same direction:\r\n//             let equalVector3 = (a, b) => Math.abs(a.x - b.x) < EPS && Math.abs(a.y - b.y) < EPS && Math.abs(a.z - b.z) < EPS;\r\n//             function atLeast3EqualNormals() {\r\n//                 let a = [...ns]; // Shallow copy.\r\n//                 a.sort(vertexSorter);\r\n//                 if (equalVector3(a[0], a[a.length - 1])) {\r\n//                     return true; // All equal!\r\n//                 }\r\n//                 if (a.length !== 4) {\r\n//                     return false;\r\n//                 }\r\n//                 return equalVector3(a[0], a[2]) || equalVector3(a[1], a[3]);\r\n//             }\r\n//             if (atLeast3EqualNormals()) { // Just project onto the plane where the normals point the most:\r\n//                 // First check if this is a simple rectilinear face:\r\n//                 let DX, DY, DZ;\r\n//                 if (vs.some(v => v.o === true)) {\r\n//                     let origo = vs.find(v => v.o === true);\r\n//                     let anyOther = vs.find(v => v.o !== true);\r\n//                     DX = origo.x - anyOther.x;\r\n//                     DY = origo.y - anyOther.y;\r\n//                     DZ = origo.z - anyOther.z;\r\n//                     let radius = 3 * Math.sqrt(DX * DX + DY * DY + DZ * DZ);\r\n\r\n//                     DX = v => 0.5 + (v.x - origo.x) / radius;\r\n//                     DY = v => 0.5 + (v.y - origo.y) / radius;\r\n//                     DZ = v => 0.5 + (v.z - origo.z) / radius;\r\n//                     setUV = function (fu, fv) {\r\n//                         let ret = vs.map((v, i) => { return { u: fu(v, i), v: fv(v, i) }; });\r\n//                         ret.forEach((uv, i) => {\r\n//                             let idx = 2 * indices[i];\r\n//                             uvs[idx] = 0.5 * uv.u;\r\n//                             uvs[idx + 1] = 0.5 * uv.v + 0.5;\r\n//                         });\r\n//                     }\r\n//                 }\r\n//                 else {\r\n//                     DX = dx;\r\n//                     DY = dy;\r\n//                     DZ = dz;\r\n//                 }\r\n\r\n//                 if (maxDiff(vs.map(v => v.x)) < EPS) { // y/z projection:\r\n//                     setUV(DY, DZ, true);\r\n//                 }\r\n//                 else if (maxDiff(vs.map(v => v.y)) < EPS) {\r\n//                     setUV(DX, DZ, true);\r\n//                 }\r\n//                 else if (maxDiff(vs.map(v => v.z)) < EPS) {\r\n//                     setUV(DX, DY, true);\r\n//                 }\r\n//                 else if (NX >= NY && NX >= NZ) {\r\n//                     setUV(DY, DZ, true);\r\n//                 }\r\n//                 else if (NY >= NX && NY >= NZ) {\r\n//                     setUV(DX, DZ, true);\r\n//                 }\r\n//                 else { // NZ >= both NX and NY\r\n//                     setUV(DX, DY, true);\r\n//                 }\r\n//                 return;\r\n//             }\r\n\r\n//             // Math.atan2 -> [-PI;PI], and Math.acos => [0;PI]\r\n//             const PI1 = 0.8 / Math.PI;\r\n//             const PI2 = 0.3 / Math.PI;\r\n//             let toCircle = (y, x) => (Math.atan2(y, x) + Math.PI) * PI2;\r\n//             let toHeight = x => Math.acos(x) * PI1;\r\n//             const C3 = 0.2 / (size.x + size.y + size.z);\r\n//             let dxyz = v => 0.1 + (v.x + v.y + v.z) * C3;\r\n\r\n//             if (NY >= Math.max(NX + NZ)) {\r\n//                 setUV((v, i) => dxyz(v) + toCircle(ns[i].x, ns[i].z),\r\n//                     (v, i) => dxyz(v) + toHeight(ns[i].y), false) ||\r\n//                     setUV(dx, dz, true);\r\n//             }\r\n//             else {\r\n//                 setUV((v, i) => dxyz(v) + toCircle(ns[i].x, ns[i].y),\r\n//                     (v, i) => dxyz(v) + toHeight(ns[i].z), false) ||\r\n//                     setUV(dx, dy, true);\r\n//             }\r\n//         }\r\n\r\n//         triangles.forEach(t => setUVs([t.p1, t.p2, t.p3]));\r\n//         triangles2.forEach(t => setUVs([t.p1, t.p2, t.p3]));\r\n//         quads.forEach(q => setUVs([q.p1, q.p2, q.p3, q.p4]));\r\n//         quads2.forEach(q => setUVs([q.p1, q.p2, q.p3, q.p4]));\r\n\r\n//         g.setAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));\r\n//         //g.attributes.uv2 = g.attributes.uv; // Used by aoMap (not in use yet)\r\n\r\n//         self.triangleGeometries[c] = g;\r\n//     });\r\n\r\n//     // Handle texmap geometries:\r\n//     allTriangleColors.forEach(c => self.buildTexmapGeometriesForColor(c));\r\n\r\n//     this.geometriesBuilt = true;\r\n\r\n//     //this.cleanTempData();\r\n// }\r\n\r\nLDRGeometry.prototype.cleanTempData = function () {\r\n    delete this.vertices;\r\n    delete this.lines;\r\n    delete this.conditionalLines;\r\n    delete this.quads;\r\n    delete this.quads2;\r\n    delete this.triangles;\r\n    delete this.triangles2;\r\n}\r\n\r\nLDRGeometry.prototype.buildGeometry = function (indices, vertexAttribute) {\r\n    if (indices.length === 0) {\r\n        return null;\r\n    }\r\n    let g = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Geometry.createBufferGeometry();\r\n    g = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Geometry.setIndex(indices, g);\r\n    g = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Geometry.setAttribute('position', vertexAttribute, g);\r\n\r\n    return g;\r\n}\r\n\r\nLDRGeometry.prototype.buildGeometryForConditionalLines = function (multiColored, conditionalLines) {\r\n    if (conditionalLines.length === 0) {\r\n        return;\r\n    }\r\n    this.conditionalLineGeometry = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Geometry.createBufferGeometry();\r\n    let p1s = [], p2s = [], p3s = [], p4s = [], colorIndices = [];\r\n\r\n    // Now handle conditional lines:\r\n    for (let i = 0; i < conditionalLines.length; i++) {\r\n        let line = conditionalLines[i]; // {p1, p2, p3, p4, fc}\r\n        let p1 = line.p1, p2 = line.p2, p3 = line.p3, p4 = line.p4;\r\n        // let [p1x, p1y, p1z] = line.p1;\r\n        // let [p2x, p2y, p2z] = line.p2;\r\n        // let [p3x, p3y, p3z] = line.p3;\r\n        // let [p4x, p4y, p4z] = line.p4;\r\n\r\n        p1s.push(p1.x, p1.y, p1.z, p2.x, p2.y, p2.z); // 2 points => 1 line in shader.\r\n        p2s.push(p2.x, p2.y, p2.z, p1.x, p1.y, p1.z); // Counter points for calculations\r\n        p3s.push(p3.x, p3.y, p3.z, p3.x, p3.y, p3.z); // p3's\r\n        p4s.push(p4.x, p4.y, p4.z, p4.x, p4.y, p4.z); // p4's\r\n        // p1s.push(p1x, p1y, p1z, p2x, p2y, p2z); // 2 points => 1 line in shader.\r\n        // p2s.push(p2x, p2y, p2z, p2x, p2y, p2z); // Counter points for calculations\r\n        // p3s.push(p3x, p3y, p3z, p3x, p3y, p3z); // p3's\r\n        // p4s.push(p4x, p4y, p4z, p4x, p4y, p4z); // p4's\r\n        if (multiColored) {\r\n            colorIndices.push(line.fc, line.fc); // 2 points.\r\n        }\r\n    }\r\n    this.conditionalLineGeometry = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Geometry.setAttribute(\r\n        'position', Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Geometry.createFloat32BufferAttribute(p1s, 3), this.conditionalLineGeometry\r\n    );\r\n    this.conditionalLineGeometry = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Geometry.setAttribute(\r\n        'p2', Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Geometry.createFloat32BufferAttribute(p2s, 3),\r\n\r\n        this.conditionalLineGeometry\r\n    );\r\n    this.conditionalLineGeometry = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Geometry.setAttribute(\r\n        'p3', Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Geometry.createFloat32BufferAttribute(p3s, 3),\r\n\r\n        this.conditionalLineGeometry\r\n    );\r\n    this.conditionalLineGeometry = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Geometry.setAttribute(\r\n        'p4', Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Geometry.createFloat32BufferAttribute(p4s, 3),\r\n\r\n        this.conditionalLineGeometry\r\n    );\r\n    if (multiColored) {\r\n        this.conditionalLineGeometry = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Geometry.setAttribute(\r\n            'colorIndex', Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Geometry.createFloat32BufferAttribute(new Float32Array(colorIndices), 1),\r\n\r\n            this.conditionalLineGeometry\r\n        );\r\n    }\r\n}\r\n\r\nLDRGeometry.prototype.replaceWith = function (g) {\r\n    this.vertices = g.vertices;\r\n    this.lines = g.lines;\r\n    this.conditionalLines = g.conditionalLines;\r\n    this.triangles = g.triangles;\r\n    this.triangles2 = g.triangles2;\r\n    this.quads = g.quads;\r\n    this.quads2 = g.quads2;\r\n    this.boundingBox = g.boundingBox;\r\n}\r\n\r\nLDRGeometry.prototype.replaceWithDeep = function (g) {\r\n    let self = this;\r\n    g.vertices.forEach(v => self.vertices.push({ x: v.x, y: v.y, z: v.z, o: v.o }));\r\n\r\n    for (let c in g.lines) {\r\n        if (!g.lines.hasOwnProperty(c)) {\r\n            continue;\r\n        }\r\n        let ps = [];\r\n        g.lines[c].forEach(p => ps.push({ p1: p.p1, p2: p.p2 }));\r\n        this.lines[c] = ps;\r\n    }\r\n    for (let c in g.conditionalLines) {\r\n        if (!g.conditionalLines.hasOwnProperty(c)) {\r\n            continue;\r\n        }\r\n        let ps = [];\r\n        g.conditionalLines[c].forEach(p => ps.push({ p1: p.p1, p2: p.p2, p3: p.p3, p4: p.p4 }));\r\n        this.conditionalLines[c] = ps;\r\n    }\r\n    for (let c in g.triangles) {\r\n        if (!g.triangles.hasOwnProperty(c)) {\r\n            continue;\r\n        }\r\n        let ps = [];\r\n        g.triangles[c].forEach(p => ps.push({ p1: p.p1, p2: p.p2, p3: p.p3, t: p.t }));\r\n        this.triangles[c] = ps;\r\n    }\r\n    for (let c in g.triangles2) {\r\n        if (!g.triangles2.hasOwnProperty(c)) {\r\n            continue;\r\n        }\r\n        let ps = [];\r\n        g.triangles2[c].forEach(p => ps.push({ p1: p.p1, p2: p.p2, p3: p.p3, t: p.t }));\r\n        this.triangles2[c] = ps;\r\n    }\r\n    for (let c in g.quads) {\r\n        if (!g.quads.hasOwnProperty(c)) {\r\n            continue;\r\n        }\r\n        let ps = [];\r\n        g.quads[c].forEach(p => ps.push({ p1: p.p1, p2: p.p2, p3: p.p3, p4: p.p4, t: p.t }));\r\n        this.quads[c] = ps;\r\n    }\r\n    for (let c in g.quads2) {\r\n        if (!g.quads2.hasOwnProperty(c)) {\r\n            continue;\r\n        }\r\n        let ps = [];\r\n        g.quads2[c].forEach(p => ps.push({ p1: p.p1, p2: p.p2, p3: p.p3, p4: p.p4, t: p.t }));\r\n        this.quads2[c] = ps;\r\n    }\r\n\r\n    Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().BoundingBox3.copy(g.boundingBox, this.boundingBox);\r\n}\r\n\r\n/*\r\n  Build this from the 4 types of primitives.\r\n*/\r\nLDRGeometry.prototype.fromPrimitives = function (lines, conditionalLines, triangles, quads) {\r\n    let geometries = [];\r\n\r\n    if (lines.length > 0) {\r\n        let g = new LDRGeometry();\r\n        g.fromLines(lines);\r\n        geometries.push(g);\r\n    }\r\n    if (conditionalLines.length > 0) {\r\n        let g = new LDRGeometry();\r\n        g.fromConditionalLines(conditionalLines);\r\n        geometries.push(g);\r\n    }\r\n    let culledTriangles = triangles.filter(t => t.cull);\r\n    if (culledTriangles.length > 0) {\r\n        let g = new LDRGeometry();\r\n        g.fromTriangles(true, culledTriangles);\r\n        geometries.push(g);\r\n    }\r\n    let unculledTriangles = triangles.filter(t => !t.cull);\r\n    if (unculledTriangles.length > 0) {\r\n        let g = new LDRGeometry();\r\n        g.fromTriangles(false, unculledTriangles);\r\n        geometries.push(g);\r\n    }\r\n    let culledQuads = quads.filter(q => q.cull);\r\n    if (culledQuads.length > 0) {\r\n        let g = new LDRGeometry();\r\n        g.fromQuads(true, culledQuads);\r\n        geometries.push(g);\r\n    }\r\n    let unculledQuads = quads.filter(q => !q.cull);\r\n    if (unculledQuads.length > 0) {\r\n        let g = new LDRGeometry();\r\n        g.fromQuads(false, unculledQuads);\r\n        geometries.push(g);\r\n    }\r\n    this.replaceWith(mergeGeometries(geometries));\r\n}\r\n\r\n/*\r\n  Assumes unsorted vertices that reference the primitives.\r\n  This function sort the vertices and updates the primitives to reference the vertices.\r\n */\r\nLDRGeometry.prototype.sortAndBurnVertices = function (vertices, primitives) {\r\n    vertices.sort(vertexSorter);\r\n    let idx = this.vertices.length - 1;\r\n    let prev;\r\n    for (let i = 0; i < vertices.length; i++) {\r\n        let v = vertices[i];\r\n        if (!(prev && vertexEqual(prev, v))) {\r\n            this.vertices.push({ x: v.x, y: v.y, z: v.z, o: false });\r\n            idx++;\r\n        }\r\n\r\n        let p = primitives[v.c][v.idx];\r\n        p.t = v.t; // texmapPlacement stored on primitives - not on vertices.\r\n        if (v.p === 1) {\r\n            p.p1 = idx;\r\n        }\r\n        else if (v.p === 2) {\r\n            p.p2 = idx;\r\n        }\r\n        else if (v.p === 3) {\r\n            p.p3 = idx;\r\n        }\r\n        else {\r\n            p.p4 = idx;\r\n        }\r\n        prev = v;\r\n    }\r\n}\r\n\r\n/*\r\n  Build a geometry from {p1,p2,c} lines.\r\n */\r\nLDRGeometry.prototype.fromLines = function (ps) {\r\n    let vertices = [];\r\n    for (let i = 0; i < ps.length; i++) {\r\n        let p = ps[i], idx;\r\n        if (this.lines.hasOwnProperty(p.c)) {\r\n            let t = this.lines[p.c];\r\n            idx = t.length;\r\n            t.push({});\r\n        }\r\n        else {\r\n            this.lines[p.c] = [{}];\r\n            idx = 0;\r\n        }\r\n        // vertices.push({ x: p.p1.x, y: p.p1.y, z: p.p1.z, c: p.c, idx: idx, p: 1 },\r\n        //     { x: p.p2.x, y: p.p2.y, z: p.p2.z, c: p.c, idx: idx, p: 2 });\r\n        vertices.push({ x: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getX\"])(p.p1), y: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getY\"])(p.p1), z: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getZ\"])(p.p1), c: p.c, idx: idx, p: 1 },\r\n            { x: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getX\"])(p.p2), y: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getY\"])(p.p2), z: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getZ\"])(p.p2), c: p.c, idx: idx, p: 2 });\r\n\r\n        Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().BoundingBox3.expandByPoint(p.p1, this.boundingBox);\r\n        Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().BoundingBox3.expandByPoint(p.p2, this.boundingBox);\r\n    }\r\n    this.sortAndBurnVertices(vertices, this.lines);\r\n}\r\n\r\nLDRGeometry.prototype.fromConditionalLines = function (ps) {\r\n    let vertices = [];\r\n    for (let i = 0; i < ps.length; i++) {\r\n        let p = ps[i], idx;\r\n        if (this.conditionalLines.hasOwnProperty(p.c)) {\r\n            let t = this.conditionalLines[p.c];\r\n            idx = t.length;\r\n            t.push({});\r\n        }\r\n        else {\r\n            this.conditionalLines[p.c] = [{}];\r\n            idx = 0;\r\n        }\r\n        // vertices.push({ x: p.p1.x, y: p.p1.y, z: p.p1.z, c: p.c, idx: idx, p: 1 },\r\n        //     { x: p.p2.x, y: p.p2.y, z: p.p2.z, c: p.c, idx: idx, p: 2 },\r\n        //     { x: p.p3.x, y: p.p3.y, z: p.p3.z, c: p.c, idx: idx, p: 3 },\r\n        //     { x: p.p4.x, y: p.p4.y, z: p.p4.z, c: p.c, idx: idx, p: 4 });\r\n        vertices.push({ x: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getX\"])(p.p1), y: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getY\"])(p.p1), z: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getZ\"])(p.p1), c: p.c, idx: idx, p: 1 },\r\n            { x: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getX\"])(p.p2), y: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getY\"])(p.p2), z: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getZ\"])(p.p2), c: p.c, idx: idx, p: 2 },\r\n            { x: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getX\"])(p.p3), y: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getY\"])(p.p3), z: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getZ\"])(p.p3), c: p.c, idx: idx, p: 3 },\r\n            { x: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getX\"])(p.p4), y: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getY\"])(p.p4), z: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getZ\"])(p.p4), c: p.c, idx: idx, p: 4 }\r\n        );\r\n\r\n        Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().BoundingBox3.expandByPoint(p.p1, this.boundingBox);\r\n        Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().BoundingBox3.expandByPoint(p.p2, this.boundingBox);\r\n    }\r\n    this.sortAndBurnVertices(vertices, this.conditionalLines);\r\n}\r\n\r\nLDRGeometry.prototype.fromTriangles = function (cull, ps) {\r\n    let vertices = [];\r\n    let triangles = cull ? this.triangles : this.triangles2;\r\n    let self = this;\r\n    ps.forEach(p => {\r\n        let idx;\r\n        if (triangles.hasOwnProperty(p.c)) {\r\n            let t = triangles[p.c];\r\n            idx = t.length;\r\n            t.push({});\r\n        }\r\n        else {\r\n            triangles[p.c] = [{}];\r\n            idx = 0;\r\n        }\r\n        // vertices.push({ x: p.p1.x, y: p.p1.y, z: p.p1.z, c: p.c, idx: idx, p: 1, t: p.tmp },\r\n        //     { x: p.p2.x, y: p.p2.y, z: p.p2.z, c: p.c, idx: idx, p: 2, t: p.tmp },\r\n        //     { x: p.p3.x, y: p.p3.y, z: p.p3.z, c: p.c, idx: idx, p: 3, t: p.tmp });\r\n        vertices.push({ x: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getX\"])(p.p1), y: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getY\"])(p.p1), z: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getZ\"])(p.p1), c: p.c, idx: idx, p: 1 },\r\n            { x: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getX\"])(p.p2), y: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getY\"])(p.p2), z: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getZ\"])(p.p2), c: p.c, idx: idx, p: 2 },\r\n            { x: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getX\"])(p.p3), y: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getY\"])(p.p3), z: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getZ\"])(p.p3), c: p.c, idx: idx, p: 3 }\r\n        );\r\n\r\n        Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().BoundingBox3.expandByPoint(p.p1, self.boundingBox);\r\n        Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().BoundingBox3.expandByPoint(p.p2, self.boundingBox);\r\n        Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().BoundingBox3.expandByPoint(p.p3, self.boundingBox);\r\n    });\r\n    this.sortAndBurnVertices(vertices, triangles);\r\n}\r\n\r\nLDRGeometry.prototype.fromQuads = function (cull, ps) {\r\n    let vertices = [];\r\n    let quads = cull ? this.quads : this.quads2;\r\n    let self = this;\r\n    ps.forEach(p => {\r\n        let idx;\r\n        if (quads.hasOwnProperty(p.c)) {\r\n            let t = quads[p.c];\r\n            idx = t.length;\r\n            t.push({});\r\n        }\r\n        else {\r\n            quads[p.c] = [{}];\r\n            idx = 0;\r\n        }\r\n        // vertices.push({ x: p.p1.x, y: p.p1.y, z: p.p1.z, c: p.c, idx: idx, p: 1, t: p.tmp },\r\n        //     { x: p.p2.x, y: p.p2.y, z: p.p2.z, c: p.c, idx: idx, p: 2, t: p.tmp },\r\n        //     { x: p.p3.x, y: p.p3.y, z: p.p3.z, c: p.c, idx: idx, p: 3, t: p.tmp },\r\n        //     { x: p.p4.x, y: p.p4.y, z: p.p4.z, c: p.c, idx: idx, p: 4, t: p.tmp });\r\n        vertices.push({ x: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getX\"])(p.p1), y: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getY\"])(p.p1), z: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getZ\"])(p.p1), c: p.c, idx: idx, p: 1 },\r\n            { x: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getX\"])(p.p2), y: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getY\"])(p.p2), z: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getZ\"])(p.p2), c: p.c, idx: idx, p: 2 },\r\n            { x: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getX\"])(p.p3), y: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getY\"])(p.p3), z: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getZ\"])(p.p3), c: p.c, idx: idx, p: 3 },\r\n            { x: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getX\"])(p.p4), y: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getY\"])(p.p4), z: Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getZ\"])(p.p4), c: p.c, idx: idx, p: 4 }\r\n        );\r\n        Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().BoundingBox3.expandByPoint(p.p1, self.boundingBox);\r\n        Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().BoundingBox3.expandByPoint(p.p2, self.boundingBox);\r\n        Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().BoundingBox3.expandByPoint(p.p3, self.boundingBox);\r\n        Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().BoundingBox3.expandByPoint(p.p4, self.boundingBox);\r\n    });\r\n    this.sortAndBurnVertices(vertices, quads);\r\n}\r\n\r\n/*\r\n  Consolidate the primitives and sub-parts of the step.\r\n*/\r\nLDRGeometry.prototype.fromStep = function (loader, step) {\r\n    let geometries = [];\r\n    if (step.hasPrimitives) {\r\n        let g = new LDRGeometry();\r\n        g.fromPrimitives(step.lines, step.conditionalLines, step.triangles, step.quads);\r\n        geometries.push(g);\r\n    }\r\n\r\n    function handleSubModel(subModel) {\r\n        let g = new LDRGeometry();\r\n        g.fromPartDescription(loader, subModel);\r\n        geometries.push(g);\r\n    }\r\n    step.subModels.forEach(handleSubModel);\r\n\r\n    this.replaceWith(mergeGeometries(geometries));\r\n}\r\n\r\nLDRGeometry.prototype.fromPartType = function (loader, pt) {\r\n    if (pt.steps.length === 1) {\r\n        this.fromStep(loader, pt.steps[0]);\r\n    }\r\n    else {\r\n        console.warn('Expected 1 step. Skipping geometry for ' + pt.ID);\r\n    }\r\n}\r\n\r\nLDRGeometry.prototype.fromPartDescription = function (loader, pd) {\r\n    let pt = loader.getPartType(pd.ID);\r\n    if (!pt) {\r\n        throw \"Part not loaded: \" + pd.ID;\r\n    }\r\n    pt.ensureGeometry(loader);\r\n\r\n    this.replaceWithDeep(pt.geometry);\r\n\r\n    let m3e = Object(_LDRMatrix3__WEBPACK_IMPORTED_MODULE_3__[\"getElements\"])(pd.r);\r\n    // let m4 = createMatrix4(m3e[0], m3e[3], m3e[6], pd.p.x,\r\n    //     m3e[1], m3e[4], m3e[7], pd.p.y,\r\n    //     m3e[2], m3e[5], m3e[8], pd.p.z,\r\n    //     0, 0, 0, 1\r\n    // );\r\n    let m4 = Object(_LDRMatrix4__WEBPACK_IMPORTED_MODULE_4__[\"create\"])(m3e[0], m3e[3], m3e[6], Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getX\"])(pd.p),\r\n        m3e[1], m3e[4], m3e[7], Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getY\"])(pd.p),\r\n        m3e[2], m3e[5], m3e[8], Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getZ\"])(pd.p),\r\n        0, 0, 0, 1\r\n    );\r\n    this.boundingBox = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().BoundingBox3.applyMatrix4(m4, this.boundingBox);\r\n\r\n    // let invert = pd.invertCCW !== (getExternal().getMatrix3Determinant(pd.r) < 0);\r\n\r\n    // Function to update color (notice that input and output are strings):\r\n    let replaceColor;\r\n    if (pd.c === 16) {\r\n        replaceColor = x => '' + x; // Do nothing.\r\n    }\r\n    else if (pd.c === 24) {\r\n        replaceColor = x => x === '16' ? '24' : '' + x;\r\n    }\r\n    else if (pd.c < 0) { // Edge color\r\n        let pos = '' + pd.c;\r\n        replaceColor = function (x) {\r\n            if (x === '16' || x === '24') {\r\n                return pos;\r\n            }\r\n            else {\r\n                return '' + x;\r\n            }\r\n        };\r\n    }\r\n    else { // Standard color\r\n        let pos = '' + pd.c;\r\n        let neg = '' + (-pd.c - 1);\r\n        replaceColor = function (x) {\r\n            if (x === '16') {\r\n                return pos;\r\n            }\r\n            else if (x === '24') {\r\n                return neg;\r\n            }\r\n            else {\r\n                return '' + x;\r\n            }\r\n        };\r\n    }\r\n\r\n    // TODO: Optimize rotation matrices for I-matrix (1,0,0,0,1,0,0,0,1), \\-matrices, etc.\r\n\r\n    // Update and re-sort the vertices:\r\n    // First decorate with initial index and update position:\r\n    let p = Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"create\"])(0, 0, 0);\r\n    // let lp = pd.logoPosition;\r\n    for (let i = 0; i < this.vertices.length; i++) {\r\n        let v = this.vertices[i];\r\n        v.oldIndex = i;\r\n\r\n        // p = createVector3.set(v.x, v.y, v.z, p);\r\n        p = Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"create\"])(v.x, v.y, v.z);\r\n        p = Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"applyMatrix3\"])(pd.r, p);\r\n        p = Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"add\"])(pd.p, p);\r\n\r\n        // v.x = p.x;\r\n        // v.y = p.y;\r\n        // v.z = p.z;\r\n        // v.o = v.o || (lp && lp.x === v.x && lp.y === v.y && lp.z === v.z);\r\n\r\n        v.x = Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getX\"])(p);\r\n        v.y = Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getY\"])(p);\r\n        v.z = Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_2__[\"getZ\"])(p);\r\n        // v.o = v.o || (lp && lp.x === v.x && lp.y === v.y && lp.z === v.z);\r\n\r\n    }\r\n    let newIndices = [];\r\n    this.vertices.sort(vertexSorter);\r\n    for (let i = 0; i < this.vertices.length; i++) {\r\n        let v = this.vertices[i];\r\n        newIndices[v.oldIndex] = i;\r\n    }\r\n    // Clean up vertices:\r\n    this.vertices.forEach(v => delete v.oldIndex);\r\n\r\n    // Update the indices and colors on the primitives:\r\n    function t(withColors, transform) {\r\n        let ret = {};\r\n        for (let c in withColors) {\r\n            if (!withColors.hasOwnProperty(c)) {\r\n                continue;\r\n            }\r\n            let primitives = withColors[c].map(transform);\r\n            let toColor = replaceColor(c);\r\n            if (ret.hasOwnProperty(toColor)) {\r\n                ret[toColor].push(...primitives);\r\n            }\r\n            else {\r\n                ret[toColor] = primitives;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    this.lines = t(this.lines, p => { return { p1: newIndices[p.p1], p2: newIndices[p.p2] }; });\r\n    this.conditionalLines = t(this.conditionalLines, p => { return { p1: newIndices[p.p1], p2: newIndices[p.p2], p3: newIndices[p.p3], p4: newIndices[p.p4] }; });\r\n    // if (invert) {\r\n    //     this.triangles = t(this.triangles, p => { return { p1: newIndices[p.p3], p2: newIndices[p.p2], p3: newIndices[p.p1] }; });\r\n    //     this.quads = t(this.quads, p => { return { p1: newIndices[p.p4], p2: newIndices[p.p3], p3: newIndices[p.p2], p4: newIndices[p.p1] }; });\r\n    // }\r\n    // else {\r\n    this.triangles = t(this.triangles, p => { return { p1: newIndices[p.p1], p2: newIndices[p.p2], p3: newIndices[p.p3] }; });\r\n    this.quads = t(this.quads, p => { return { p1: newIndices[p.p1], p2: newIndices[p.p2], p3: newIndices[p.p3], p4: newIndices[p.p4] }; });\r\n    // }\r\n    this.triangles2 = t(this.triangles2, p => { return { p1: newIndices[p.p3], p2: newIndices[p.p2], p3: newIndices[p.p1] }; });\r\n    this.quads2 = t(this.quads2, p => { return { p1: newIndices[p.p4], p2: newIndices[p.p3], p3: newIndices[p.p2], p4: newIndices[p.p1] }; });\r\n\r\n    // No culling in PD: Move all culled triangles and quads to non-culled:\r\n    if (!pd.cull) {\r\n        function mv(from, to) {\r\n            for (let c in from) {\r\n                if (!from.hasOwnProperty(c)) {\r\n                    continue;\r\n                }\r\n                if (!to.hasOwnProperty(c)) {\r\n                    to[c] = [];\r\n                }\r\n                to[c].push(...from[c]);\r\n            }\r\n        }\r\n        mv(this.triangles, this.triangles2);\r\n        this.triangles = [];\r\n        mv(this.quads, this.quads2);\r\n        this.quads = [];\r\n    }\r\n\r\n    // // Overwrite texmap placement on primitives:\r\n    // if (pd.texmapPlacement) {\r\n    //     function copyDown(ps) {\r\n    //         for (let c in ps) {\r\n    //             if (ps.hasOwnProperty(c)) {\r\n    //                 ps[c].forEach(t => t.t = pd.texmapPlacement);\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     copyDown(this.triangles);\r\n    //     copyDown(this.triangle2);\r\n    //     copyDown(this.quads);\r\n    //     copyDown(this.quads2);\r\n    // }\r\n}\r\n\r\nLDRGeometry.prototype.mapIndices = function (map) {\r\n    let map2 = function (p, map) {\r\n        p.p1 = map[p.p1];\r\n        p.p2 = map[p.p2];\r\n    }\r\n    let map3 = function (p, map) {\r\n        p.p1 = map[p.p1];\r\n        p.p2 = map[p.p2];\r\n        p.p3 = map[p.p3];\r\n    }\r\n    let map4 = function (p, map) {\r\n        p.p1 = map[p.p1];\r\n        p.p2 = map[p.p2];\r\n        p.p3 = map[p.p3];\r\n        p.p4 = map[p.p4];\r\n    }\r\n\r\n    for (let c in this.lines) {\r\n        if (this.lines.hasOwnProperty(c)) {\r\n            this.lines[c].forEach(x => map2(x, map));\r\n        }\r\n    }\r\n    for (let c in this.conditionalLines) {\r\n        if (this.conditionalLines.hasOwnProperty(c)) {\r\n            this.conditionalLines[c].forEach(x => map4(x, map));\r\n        }\r\n    }\r\n    for (let c in this.triangles) {\r\n        if (this.triangles.hasOwnProperty(c)) {\r\n            this.triangles[c].forEach(x => map3(x, map));\r\n        }\r\n    }\r\n    for (let c in this.triangles2) {\r\n        if (this.triangles2.hasOwnProperty(c)) {\r\n            this.triangles2[c].forEach(x => map3(x, map));\r\n        }\r\n    }\r\n    for (let c in this.quads) {\r\n        if (this.quads.hasOwnProperty(c)) {\r\n            this.quads[c].forEach(x => map4(x, map));\r\n        }\r\n    }\r\n    for (let c in this.quads2) {\r\n        if (this.quads2.hasOwnProperty(c)) {\r\n            this.quads2[c].forEach(x => map4(x, map));\r\n        }\r\n    }\r\n}\r\n\r\nLDRGeometry.prototype.merge = function (other) {\r\n    // Merge bounding box:\r\n    this.boundingBox = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().BoundingBox3.setMin(Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().BoundingBox3.getMin(other.boundingBox), this.boundingBox);\r\n    this.boundingBox = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().BoundingBox3.setMax(Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().BoundingBox3.getMax(other.boundingBox), this.boundingBox);\r\n\r\n    // Merge vertices:\r\n    let mergedVertices = []; // Assume both vertex streams are sorted, so duplicates are removed.\r\n    let indexMapThis = []; // original index -> merged vertex index.\r\n    let indexMapOther = []; // Same for other.\r\n    let idxThis = 0, idxOther = 0;\r\n\r\n    // Perform merging:\r\n    while (idxThis < this.vertices.length && idxOther < other.vertices.length) {\r\n        let pThis = this.vertices[idxThis];\r\n        let pOther = other.vertices[idxOther];\r\n        if (vertexEqual(pThis, pOther)) {\r\n            indexMapThis.push(mergedVertices.length);\r\n            indexMapOther.push(mergedVertices.length);\r\n            pThis.o = pThis.o || pOther.o;\r\n            mergedVertices.push(pThis);\r\n            ++idxThis;\r\n            ++idxOther;\r\n        }\r\n        else if (vertexLessThan(pThis, pOther)) {\r\n            indexMapThis.push(mergedVertices.length);\r\n            mergedVertices.push(pThis);\r\n            ++idxThis;\r\n        }\r\n        else {\r\n            indexMapOther.push(mergedVertices.length);\r\n            mergedVertices.push(pOther);\r\n            ++idxOther;\r\n        }\r\n    }\r\n    while (idxThis < this.vertices.length) {\r\n        let pThis = this.vertices[idxThis];\r\n        indexMapThis.push(mergedVertices.length);\r\n        mergedVertices.push(pThis);\r\n        ++idxThis;\r\n    }\r\n    while (idxOther < other.vertices.length) {\r\n        let pOther = other.vertices[idxOther];\r\n        indexMapOther.push(mergedVertices.length);\r\n        mergedVertices.push(pOther);\r\n        ++idxOther;\r\n    }\r\n\r\n    // Merge the lines, conditional lines, triangles and quads:\r\n    this.vertices = mergedVertices;\r\n    this.mapIndices(indexMapThis);\r\n    other.mapIndices(indexMapOther);\r\n\r\n    function mergePrimitives(thisPrim, otherPrim) {\r\n        for (let c in otherPrim) {\r\n            if (!otherPrim.hasOwnProperty(c)) {\r\n                continue;\r\n            }\r\n            if (thisPrim.hasOwnProperty(c)) {\r\n                thisPrim[c].push(...otherPrim[c]);\r\n            }\r\n            else {\r\n                thisPrim[c] = otherPrim[c];\r\n            }\r\n        }\r\n    }\r\n\r\n    mergePrimitives(this.lines, other.lines);\r\n    mergePrimitives(this.conditionalLines, other.conditionalLines);\r\n    mergePrimitives(this.triangles, other.triangles);\r\n    mergePrimitives(this.triangles2, other.triangles2);\r\n    mergePrimitives(this.quads, other.quads);\r\n    mergePrimitives(this.quads2, other.quads2);\r\n}\r\n\n\n//# sourceURL=webpack://ldrRender1Service/./src/application_layer/LDRGeometry.js?");

/***/ }),

/***/ "./src/application_layer/LDRLoader.js":
/*!********************************************!*\
  !*** ./src/application_layer/LDRLoader.js ***!
  \********************************************/
/*! exports provided: LDRLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LDRLoader\", function() { return LDRLoader; });\nlet LDRLoader = function () {\r\n    this.partTypes = {};\r\n}\r\n\r\nLDRLoader.prototype.getPartType = function (id) {\r\n    let pt = this.partTypes[id];\r\n    if (pt === true || pt === undefined) {\r\n        return null;\r\n    }\r\n    return pt;\r\n}\r\n\r\n\n\n//# sourceURL=webpack://ldrRender1Service/./src/application_layer/LDRLoader.js?");

/***/ }),

/***/ "./src/application_layer/LDRMatrix3.js":
/*!*********************************************!*\
  !*** ./src/application_layer/LDRMatrix3.js ***!
  \*********************************************/
/*! exports provided: create, multiplyMatrices, getElements */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiplyMatrices\", function() { return multiplyMatrices; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getElements\", function() { return getElements; });\n// TODO change to reason type\r\n\r\n//row major order\r\nlet create = (a0, a1, a2, a3, a4, a5, a6, a7, a8) => {\r\n    return [a0, a1, a2, a3, a4, a5, a6, a7, a8];\r\n}\r\n\r\n\r\nlet _createByElements = (a0, a1, a2, a3, a4, a5, a6, a7, a8) => {\r\n    return [a0, a3, a6, a1, a4, a7, a2, a5, a8];\r\n}\r\n\r\nlet multiplyMatrices = (a, b) => {\r\n    let [a0, a1, a2, a3, a4, a5, a6, a7, a8] = getElements(a);\r\n    let [b0, b1, b2, b3, b4, b5, b6, b7, b8] = getElements(b);\r\n\r\n    return _createByElements(\r\n        a0 * b0 + a3 * b1 + a6 * b2,\r\n        a1 * b0 + a4 * b1 + a7 * b2,\r\n        a2 * b0 + a5 * b1 + a8 * b2,\r\n\r\n        a0 * b3 + a3 * b4 + a6 * b5,\r\n        a1 * b3 + a4 * b4 + a7 * b5,\r\n        a2 * b3 + a5 * b4 + a8 * b5,\r\n\r\n        a0 * b6 + a3 * b7 + a6 * b8,\r\n        a1 * b6 + a4 * b7 + a7 * b8,\r\n        a2 * b6 + a5 * b7 + a8 * b8,\r\n    );\r\n}\r\n\r\n//column major order\r\nlet getElements = ([a0, a1, a2, a3, a4, a5, a6, a7, a8]) => {\r\n    return [a0, a3, a6, a1, a4, a7, a2, a5, a8];\r\n}\n\n//# sourceURL=webpack://ldrRender1Service/./src/application_layer/LDRMatrix3.js?");

/***/ }),

/***/ "./src/application_layer/LDRMatrix4.js":
/*!*********************************************!*\
  !*** ./src/application_layer/LDRMatrix4.js ***!
  \*********************************************/
/*! exports provided: create */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\n// TODO change to reason type\r\n\r\n//row major order\r\nlet create = (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) => {\r\n    return [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15];\r\n}\n\n//# sourceURL=webpack://ldrRender1Service/./src/application_layer/LDRMatrix4.js?");

/***/ }),

/***/ "./src/application_layer/LDRMeshCollector.js":
/*!***************************************************!*\
  !*** ./src/application_layer/LDRMeshCollector.js ***!
  \***************************************************/
/*! exports provided: MeshCollectorIdx, LDRMeshCollector */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MeshCollectorIdx\", function() { return MeshCollectorIdx; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LDRMeshCollector\", function() { return LDRMeshCollector; });\n/* harmony import */ var _external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../external_layer/render_engine/RenderEngineExternal.js */ \"./src/external_layer/render_engine/RenderEngineExternal.js\");\n/* harmony import */ var _LDRColorMaterials__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LDRColorMaterials */ \"./src/application_layer/LDRColorMaterials.js\");\n\r\n\r\n\r\n/*\r\n  MeshCollector holds references to meshes (and similar Three.js structures for lines).\r\n  A Mesh Collector handles updates of meshes. This includes;\r\n  - Changes in options (coloring of old parts, edge colors)\r\n  - visibility\r\n  - 'old': A part placed in 'earlier steps' can be colored 'old' to highlight new parts\r\n  - 'ghost': 'Ghosted' parts will be shown by their lines only (no faces).\r\n*/\r\nlet MeshCollectorIdx = 0;\r\nlet LDRMeshCollector = function (opaqueObject, sixteenObject, transObject, outliner) {\r\n    this.opaqueObject = opaqueObject;\r\n    this.sixteenObject = sixteenObject; // To be painted after anything opaque, as it might be trans.\r\n    this.transObject = transObject; // To be painted last.\r\n    this.outliner = outliner || false; // With outlined objects\r\n\r\n    this.lineMeshes = []; // {mesh,part,conditional}\r\n    this.triangleMeshes = []; // {mesh,part,parent}\r\n\r\n    this.old = false;\r\n    this.visible = true;\r\n    this.boundingBox;\r\n    this.isMeshCollector = true;\r\n    this.idx = MeshCollectorIdx++;\r\n}\r\n\r\nLDRMeshCollector.prototype.addLines = function (mesh, part, conditional) {\r\n    this.lineMeshes.push({ mesh: mesh, part: part, conditional: conditional });\r\n\r\n    Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Mesh.add(mesh, this.opaqueObject);\r\n}\r\n\r\nLDRMeshCollector.prototype.addMesh = function (color, mesh, part) {\r\n    let parent;\r\n    if (color === 16) {\r\n        parent = this.sixteenObject;\r\n    }\r\n    else if (Object(_LDRColorMaterials__WEBPACK_IMPORTED_MODULE_1__[\"isTrans\"])(color)) {\r\n        parent = this.transObject;\r\n    }\r\n    else {\r\n        parent = this.opaqueObject;\r\n    }\r\n    this.triangleMeshes.push({ mesh: mesh, part: part, parent: parent });\r\n    Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Mesh.add(mesh, parent);\r\n}\r\n\r\n// LDRMeshCollector.prototype.removeAllMeshes = function () {\r\n//     let self = this;\r\n//     this.lineMeshes.forEach(obj => self.opaqueObject.remove(obj.mesh));\r\n//     this.triangleMeshes.forEach(obj => obj.parent.remove(obj.mesh));\r\n// }\r\n\r\n// /*\r\n//   Sets '.visible' on all meshes according to LDR.Options and \r\n//   visibility of this meshCollector.\r\n//  */\r\n// LDRMeshCollector.prototype.updateMeshVisibility = function () {\r\n//     let v = this.visible;\r\n//     let lineV = v && LDR.Options && LDR.Options.lineContrast !== 2;\r\n\r\n//     this.lineMeshes.forEach(obj => obj.mesh.visible = lineV);\r\n\r\n//     let old = this.old;\r\n//     this.triangleMeshes.forEach(obj => obj.mesh.visible = v && (old || !(LDR.Options && LDR.Options.showEditor && obj.part && obj.part.original && obj.part.original.ghost))); // Do not show faces for ghosted parts.\r\n// }\r\n\r\n\r\n\r\nLDRMeshCollector.prototype.expandBoundingBox = function (boundingBox, m) {\r\n    let b = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().BoundingBox3.create();\r\n    b = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().BoundingBox3.copy(boundingBox, b);\r\n    b = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().BoundingBox3.applyMatrix4(m, b);\r\n\r\n    if (!this.boundingBox) {\r\n        this.boundingBox = b;\r\n    }\r\n    else {\r\n        this.boundingBox = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().BoundingBox3.expandByPoint(Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().BoundingBox3.getMin(b), this.boundingBox);\r\n        this.boundingBox = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().BoundingBox3.expandByPoint(Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().BoundingBox3.getMax(b), this.boundingBox);\r\n    }\r\n}\n\n//# sourceURL=webpack://ldrRender1Service/./src/application_layer/LDRMeshCollector.js?");

/***/ }),

/***/ "./src/application_layer/LDRPartType.js":
/*!**********************************************!*\
  !*** ./src/application_layer/LDRPartType.js ***!
  \**********************************************/
/*! exports provided: LDRPartType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LDRPartType\", function() { return LDRPartType; });\n/* harmony import */ var _LDRGeometry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LDRGeometry */ \"./src/application_layer/LDRGeometry.js\");\n/* harmony import */ var _LDRColorManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LDRColorManager */ \"./src/application_layer/LDRColorManager.js\");\n/* harmony import */ var _LDRColorMaterials__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LDRColorMaterials */ \"./src/application_layer/LDRColorMaterials.js\");\n/* harmony import */ var _LDRMatrix3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./LDRMatrix3 */ \"./src/application_layer/LDRMatrix3.js\");\n/* harmony import */ var _LDRMatrix4__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./LDRMatrix4 */ \"./src/application_layer/LDRMatrix4.js\");\n/* harmony import */ var _external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../external_layer/render_engine/RenderEngineExternal.js */ \"./src/external_layer/render_engine/RenderEngineExternal.js\");\n/* harmony import */ var _LDRVector3__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./LDRVector3 */ \"./src/application_layer/LDRVector3.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet LDRPartType = function () {\r\n    // this.name; // The value for '0 FILE' and '0 Name:'.\r\n    this.ID = null; // this.name, but lower case and with backslashes replaced with forward slashes.\r\n    // this.modelDescription;\r\n    // this.author;\r\n    // this.license;\r\n    this.steps = [];\r\n    // this.headerLines = [];\r\n    // // this.lastRotation = null;\r\n    // // this.replacement;\r\n    // this.inlined;\r\n    // this.ldraw_org;\r\n    this.geometry;\r\n    // // this.cnt = -1;\r\n    // this.cleanSteps = false;\r\n    // // this.certifiedBFC;\r\n    // // this.CCW;\r\n    // this.consistentFileAndName;\r\n\r\n    // this.preferredColor;\r\n\r\n    // // To support early cleanup:\r\n    // this.referencedFrom = {};\r\n    // this.references = 0;\r\n\r\n    this.isPart = false;\r\n}\r\n\r\nLDRPartType.prototype.ensureGeometry = function (loader) {\r\n    if (this.geometry) {\r\n        return; // Already prepared.\r\n    }\r\n    this.geometry = new _LDRGeometry__WEBPACK_IMPORTED_MODULE_0__[\"LDRGeometry\"]();\r\n    this.geometry.fromPartType(loader, this);\r\n    // if (loader.cleanUpPrimitivesAndSubParts) {\r\n    //     this.removePrimitivesAndSubParts(loader);\r\n    // }\r\n}\r\n\r\n// LDRPartType.prototype.generateThreePart = function (loader, c, p, r, cull, inv, mc, pd, taskList) {\r\n// LDRPartType.prototype.generateThreePart = function (loader, c, p, r, cull, inv, mc, pd) {\r\nLDRPartType.prototype.generateThreePart = function (loader, c, p, r, mc, pd) {\r\n    if (!this.geometry) {\r\n        if (this.isPart) {\r\n            // if (taskList) {\r\n            //     let self = this;\r\n            //     taskList.push(() => self.generateThreePart(loader, c, p, r, cull, inv, mc, pd));\r\n            //     mc.expandBoundingBoxByPoint(p); // Assumes p is within the part.\r\n            //     return;\r\n            // }\r\n            // else {\r\n            this.ensureGeometry(loader);\r\n            // }\r\n        }\r\n        else {\r\n            // this.steps.forEach(step => step.generateThreePart(loader, c, p, r, cull, inv, mc, taskList));\r\n            // this.steps.forEach(step => step.generateThreePart(loader, c, p, r, cull, inv, mc));\r\n            this.steps.forEach(step => step.generateThreePart(loader, c, p, r, mc));\r\n            return;\r\n        }\r\n    }\r\n\r\n    // if (loader.physicalRenderingAge === 0) {\r\n    this.geometry.buildGeometriesAndColors();\r\n    // }\r\n    // else {\r\n    //     this.geometry.buildPhysicalGeometriesAndColors();\r\n    // }\r\n\r\n    let m3e = Object(_LDRMatrix3__WEBPACK_IMPORTED_MODULE_3__[\"getElements\"])(r);\r\n    // let m4 = createMatrix4(m3e[0], m3e[3], m3e[6], p.x,\r\n    //     m3e[1], m3e[4], m3e[7], p.y,\r\n    //     m3e[2], m3e[5], m3e[8], p.z,\r\n    //     0, 0, 0, 1\r\n    // );\r\n    let m4 = Object(_LDRMatrix4__WEBPACK_IMPORTED_MODULE_4__[\"create\"])(m3e[0], m3e[3], m3e[6], Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_6__[\"getX\"])(p),\r\n        m3e[1], m3e[4], m3e[7], Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_6__[\"getY\"])(p),\r\n        m3e[2], m3e[5], m3e[8], Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_6__[\"getZ\"])(p),\r\n        0, 0, 0, 1\r\n    );\r\n\r\n    if (this.geometry.lineGeometry) {\r\n        let material = new _LDRColorMaterials__WEBPACK_IMPORTED_MODULE_2__[\"buildLineMaterial\"](this.geometry.lineColorManager, c, false);\r\n        let normalLines = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_5__[\"getExternal\"])().LineSegments.create(this.geometry.lineGeometry, material);\r\n        normalLines = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_5__[\"getExternal\"])().LineSegments.applyMatrix4(m4, normalLines);\r\n        mc.addLines(normalLines, pd, false);\r\n    }\r\n\r\n    if (this.geometry.conditionalLineGeometry) {\r\n        let material = new _LDRColorMaterials__WEBPACK_IMPORTED_MODULE_2__[\"buildLineMaterial\"](this.geometry.lineColorManager, c, true);\r\n        let conditionalLines = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_5__[\"getExternal\"])().LineSegments.create(this.geometry.conditionalLineGeometry, material);\r\n        conditionalLines = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_5__[\"getExternal\"])().LineSegments.applyMatrix4(m4, conditionalLines);\r\n        mc.addLines(conditionalLines, pd, true);\r\n    }\r\n\r\n    // Normal triangle geometries:\r\n    for (let tc in this.geometry.triangleGeometries) {\r\n        if (!this.geometry.triangleGeometries.hasOwnProperty(tc)) {\r\n            continue;\r\n        }\r\n        let g = this.geometry.triangleGeometries[tc];\r\n\r\n        let material;\r\n        // if (loader.physicalRenderingAge === 0) { // Simple rendering:\r\n        let triangleColorManager = new _LDRColorManager__WEBPACK_IMPORTED_MODULE_1__[\"LDRColorManager\"]();\r\n        triangleColorManager.get(tc); // Ensure color is present.\r\n        material = new _LDRColorMaterials__WEBPACK_IMPORTED_MODULE_2__[\"buildTriangleMaterial\"](triangleColorManager, c, false);\r\n        // }\r\n        // else { // Physical rendering:\r\n        //     tc = tc === '16' ? c : tc;\r\n        //     material = LDRColors.buildStandardMaterial(tc);\r\n        // }\r\n        let mesh = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_5__[\"getExternal\"])().Mesh.create(Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_5__[\"getExternal\"])().Geometry.clone(g), material); // Using clone to ensure matrix in next line doesn't affect other usages of the geometry.\r\n        // mesh.castShadow = loader.physicalRenderingAge !== 0;\r\n        mesh = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_5__[\"getExternal\"])().Mesh.setCastShadow(false, mesh);\r\n        mesh = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_5__[\"getExternal\"])().Mesh.applyMatrix4(m4, mesh);// Doesn't work for all LDraw parts as the matrix needs to be decomposable to position, quaternion and scale. Some rotation matrices in LDraw parts are not decomposable.\r\n        mc.addMesh(tc, mesh, pd);\r\n    }\r\n\r\n    // let self = this;\r\n    // for (let idx in this.geometry.texmapGeometries) { // Texmap geometries:\r\n    //     if (!this.geometry.texmapGeometries.hasOwnProperty(idx)) {\r\n    //         continue;\r\n    //     }\r\n    //     this.geometry.texmapGeometries[idx].forEach(obj => {\r\n    //         let g = obj.g, c2 = obj.c;\r\n    //         let c3 = c2 === '16' ? c : c2;\r\n    //         let textureFile = LDR.TexmapPlacements[idx].file;\r\n\r\n    //         let material;\r\n    //         let buildMaterial, setMap;\r\n    //         if (loader.physicalRenderingAge === 0) {\r\n    //             let triangleColorManager = new LDRColorManager();\r\n    //             triangleColorManager.get(c2); // Ensure color is present.\r\n    //             buildMaterial = t => LDRColors.buildTriangleMaterial(triangleColorManager, c3, t);\r\n    //             setMap = t => material.uniforms.map = { type: 't', value: t };\r\n    //         }\r\n    //         else {\r\n    //             buildMaterial = t => LDRColors.buildStandardMaterial(c3, t);\r\n    //             setMap = t => material.map = t;\r\n    //         }\r\n\r\n    //         if (loader.texmaps[textureFile] === true) {\r\n    //             material = buildMaterial(true);\r\n    //             function setTexmap(t) {\r\n    //                 setMap(t);\r\n    //                 material.needsUpdate = true;\r\n    //                 loader.onProgress(textureFile);\r\n    //             }\r\n    //             loader.texmapListeners[textureFile].push(setTexmap);\r\n    //         }\r\n    //         else {\r\n    //             let texture = loader.texmaps[textureFile];\r\n    //             material = buildMaterial(texture);\r\n    //         }\r\n\r\n    //         let mesh = new Mesh(g.clone(), material);\r\n    //         mesh.geometry.applyMatrix4(m4);\r\n    //         mc.addMesh(c3, mesh, pd);\r\n    //     });\r\n    // }\r\n\r\n    let b = this.geometry.boundingBox;\r\n    mc.expandBoundingBox(b, m4);\r\n}\n\n//# sourceURL=webpack://ldrRender1Service/./src/application_layer/LDRPartType.js?");

/***/ }),

/***/ "./src/application_layer/LDRShaders.js":
/*!*********************************************!*\
  !*** ./src/application_layer/LDRShaders.js ***!
  \*********************************************/
/*! exports provided: createShaderHeader, createShaderBody, createSimpleVertexShader, createConditionalVertexShader, SimpleFragmentShader, AlphaTestFragmentShader, TextureFragmentShader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createShaderHeader\", function() { return createShaderHeader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createShaderBody\", function() { return createShaderBody; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createSimpleVertexShader\", function() { return createSimpleVertexShader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createConditionalVertexShader\", function() { return createConditionalVertexShader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SimpleFragmentShader\", function() { return SimpleFragmentShader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AlphaTestFragmentShader\", function() { return AlphaTestFragmentShader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextureFragmentShader\", function() { return TextureFragmentShader; });\n/* harmony import */ var _external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../external_layer/render_engine/RenderEngineExternal.js */ \"./src/external_layer/render_engine/RenderEngineExternal.js\");\n/* harmony import */ var _colors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./colors */ \"./src/application_layer/colors.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nlet createShaderHeader = function (canBeOld, numberOfColors, c, defaultIsEdge) {\r\n    let ret = 'precision highp float;precision mediump int;';\r\n\r\n    if (canBeOld) {\r\n        ret += \"  uniform bool old;\\n\";\r\n        let oldColor = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Color.createWithHex(defaultIsEdge ? _colors__WEBPACK_IMPORTED_MODULE_1__[\"LDRColors\"][16].edge : _colors__WEBPACK_IMPORTED_MODULE_1__[\"LDRColors\"][16].value);\r\n        ret += \"  const vec4 oldColor = vec4(\" + oldColor.r + \",\" + oldColor.g + \",\" + oldColor.b + \",1);\\n\";\r\n    }\r\n\r\n    let multiColored = numberOfColors > 1;\r\n    if (multiColored) {\r\n        ret += \"  uniform vec4 colors[\" + numberOfColors + \"];\\n\";\r\n    }\r\n    else {\r\n        ret += \"  uniform vec4 color;\\n\";\r\n    }\r\n    return ret;\r\n}\r\n\r\n// createShaderBody = function (canBeOld, multiColored, hasTexmap) {\r\nlet createShaderBody = function (canBeOld, multiColored) {\r\n    let ret = '  uniform mat4 projectionMatrix;uniform mat4 modelViewMatrix;\\n';\r\n    // if (hasTexmap) {\r\n    //     ret += \"  attribute vec2 uv;\\n\";\r\n    //     ret += \"  varying vec2 vuv;\\n\";\r\n    // }\r\n\r\n    if (multiColored)\r\n        ret += \"  attribute vec4 position;\\n\";\r\n    else\r\n        ret += \"  attribute vec3 position;\\n\";\r\n\r\n    ret += 'varying vec4 vColor;void main(){';\r\n\r\n    ret += \"    vColor = \";\r\n    if (canBeOld)\r\n        ret += \"old ? oldColor : \";\r\n\r\n    if (multiColored) {\r\n        ret += \"colors[int(position.w)];\\n\";\r\n        ret += \"    gl_Position = projectionMatrix * modelViewMatrix * vec4(position.xyz, 1.0);\";\r\n    }\r\n    else {\r\n        ret += \"color;\\n\";\r\n        ret += \"    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\";\r\n    }\r\n    // if (hasTexmap) {\r\n    //     ret += \"  vuv=uv;\\n\";\r\n    // }\r\n\r\n    return ret;\r\n}\r\n\r\n// createSimpleVertexShader = function (canBeOld, colors, push, defaultIsEdge, hasTexmap) {\r\nlet createSimpleVertexShader = function (canBeOld, colors, push, defaultIsEdge) {\r\n    let numberOfColors = colors.length;\r\n    if (numberOfColors === 0) {\r\n        throw \"No colors!\";\r\n    }\r\n    let ret = createShaderHeader(canBeOld, numberOfColors, colors[0], defaultIsEdge);\r\n\r\n    // ret += createShaderBody(canBeOld, numberOfColors > 1, hasTexmap);\r\n    ret += createShaderBody(canBeOld, numberOfColors > 1);\r\n    if (push) {\r\n        ret += \"gl_Position.w -= 0.0000005;\";\r\n    }\r\n    ret += \"  }\";\r\n    return ret;\r\n}\r\n\r\n// See 'http://www.ldraw.org/article/218.html' for specification of optional/conditional lines.\r\n// A conditional line is drawn when the camera sees p3 and p4 on same side of line p1 p2.\r\nlet createConditionalVertexShader = function (canBeOld, colors, push) {\r\n    let numberOfColors = colors.length;\r\n    let c = colors[0];\r\n\r\n    let ret = 'precision highp float;precision mediump int;';\r\n\r\n    if (canBeOld) {\r\n        ret += \"  uniform bool old;\\n\";\r\n        let oldColor = Object(_external_layer_render_engine_RenderEngineExternal_js__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Color.createWithHex(_colors__WEBPACK_IMPORTED_MODULE_1__[\"LDRColors\"][16].edge);\r\n        ret += \"  const vec4 oldColor = vec4(\" + oldColor.r + \",\" + oldColor.g + \",\" + oldColor.b + \",1);\\n\";\r\n    }\r\n\r\n    ret += 'uniform mat4 projectionMatrix;uniform mat4 modelViewMatrix;attribute vec3 position;attribute vec3 p2;attribute vec3 p3;attribute vec3 p4;';\r\n\r\n    let multiColored = numberOfColors > 1;\r\n    if (multiColored) {\r\n        ret += \"  uniform vec4 colors[\" + numberOfColors + \"];\\n\";\r\n        ret += \"  attribute float colorIndex;\\n\"; // Should have been an int... but GLSL doesn't support that.\r\n    }\r\n    else {\r\n        ret += \"  uniform vec4 color;\\n\";\r\n    }\r\n\r\n    ret += 'varying vec4 vColor;void main(){mat4 m=projectionMatrix*modelViewMatrix;gl_Position=m*vec4(position,1.0);vec2 xp1=gl_Position.xy;vec2 d12=vec4(m*vec4(p2,1.0)).yx-xp1.yx;d12.y=-d12.y;vec2 d13=vec4(m*vec4(p3,1.0)).xy-xp1;vec2 d14=vec4(m*vec4(p4,1.0)).xy-xp1;vColor=';\r\n    // Compute color:\r\n    if (canBeOld)\r\n        ret += \"old ? oldColor : \";\r\n\r\n    if (multiColored)\r\n        ret += \"colors[int(colorIndex)];\";\r\n    else\r\n        ret += \"color;\";\r\n\r\n    ret += \"\\n        vColor.a *= sign(dot(d12, d13)*dot(d12, d14));\";\r\n    if (push)\r\n        ret += \"\\n        gl_Position.w -= 0.0000005;\";\r\n    ret += \"\\n      }\";\r\n    return ret;\r\n}\r\n\r\nlet SimpleFragmentShader = 'precision lowp float;varying vec4 vColor;void main(){gl_FragColor=vColor;}';\r\n\r\nlet AlphaTestFragmentShader = 'precision lowp float;varying vec4 vColor;void main(){if(vColor.a <= 0.001)discard;gl_FragColor = vColor;}';\r\n\r\nlet TextureFragmentShader = 'precision lowp float;varying vec4 vColor;varying vec2 vuv;uniform sampler2D map;void main(){if(vuv.x >= 0.0 && vuv.x <= 1.0 && vuv.y >= 0.0 && vuv.y <= 1.0){gl_FragColor = texture2D(map,vuv);if(gl_FragColor.a < 1.0){gl_FragColor=mix(gl_FragColor,vColor,1.0-gl_FragColor.a);}}else{gl_FragColor=vColor;}}';\r\n\n\n//# sourceURL=webpack://ldrRender1Service/./src/application_layer/LDRShaders.js?");

/***/ }),

/***/ "./src/application_layer/LDRStep.js":
/*!******************************************!*\
  !*** ./src/application_layer/LDRStep.js ***!
  \******************************************/
/*! exports provided: LDRStep */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LDRStep\", function() { return LDRStep; });\n/* harmony import */ var _LDRVector3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LDRVector3 */ \"./src/application_layer/LDRVector3.js\");\n/* harmony import */ var _LDRMatrix3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LDRMatrix3 */ \"./src/application_layer/LDRMatrix3.js\");\n/* harmony import */ var _Log__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Log */ \"./src/application_layer/Log.js\");\n\r\n\r\n\r\n\r\nlet LDRStep = function () {\r\n    // this.idx = LDRStepIdx++;\r\n    this.hasPrimitives = false;\r\n    this.subModels = []; // LDRPartDescription\r\n    this.lines = []; // LDR.Line2\r\n    this.conditionalLines = []; // LDR.Line5\r\n    this.triangles = []; // LDR.Line3\r\n    this.quads = []; // LDR.Line4\r\n    // this.rotation = null; // LDRStepRotation\r\n    // this.cnt = -1;\r\n    // this.original; // LDRStep\r\n}\r\n\r\nLDRStep.prototype.generateThreePart = function (loader, colorID, position, rotation, mc) {\r\n    //console.log(\"STEP: Creating three part for \" + this.subModels.length + \" sub models in color \" + colorID + \", cull: \" + cull + \", invertion: \" + invertCCW);\r\n    // let ownInversion = (rotation.determinant() < 0) !== invertCCW; // Adjust for inversed matrix!\r\n\r\n    function transformColor(subColorID) {\r\n        if (subColorID === 16) {\r\n            return colorID; // Main color\r\n        }\r\n        else if (subColorID === 24) {\r\n            return colorID < 0 ? colorID : -colorID - 1; // Edge color\r\n        }\r\n        return subColorID;\r\n    }\r\n\r\n    function transformPoint(p) {\r\n        // let ret = createVector3(p.x, p.y, p.z);\r\n        let ret = Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_0__[\"create\"])(Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_0__[\"getX\"])(p), Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_0__[\"getY\"])(p), Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_0__[\"getZ\"])(p));\r\n        ret = Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_0__[\"applyMatrix3\"])(rotation, ret);\r\n        ret = Object(_LDRVector3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(position, ret);\r\n        return ret;\r\n    }\r\n\r\n    function handleSubModel(subModelDesc) {\r\n        // let subModelInversion = invertCCW !== subModelDesc.invertCCW;\r\n        // let subModelCull = subModelDesc.cull && cull; // Cull only if both sub model, this step and the inherited cull info is true!\r\n\r\n        let subModelColor = transformColor(subModelDesc.c);\r\n\r\n        let subModel = loader.getPartType(subModelDesc.ID);\r\n        if (!subModel) {\r\n            Object(_Log__WEBPACK_IMPORTED_MODULE_2__[\"error\"])({ message: \"Unloaded sub model!\", subModel: subModelDesc.ID });\r\n            return;\r\n        }\r\n        // if (subModel.replacement) {\r\n        //     let replacementSubModel = loader.getPartType(subModel.replacement);\r\n        //     if (!replacementSubModel) {\r\n        //         throw {\r\n        //             name: \"UnloadedSubmodelException\",\r\n        //             level: \"Severe\",\r\n        //             message: \"Unloaded replaced sub model: \" + subModel.replacement + \" replacing \" + subModelDesc.ID,\r\n        //             htmlMessage: \"Unloaded replaced sub model: \" + subModel.replacement + \" replacing \" + subModelDesc.ID,\r\n        //             toString: function () { return this.name + \": \" + this.message; }\r\n        //         };\r\n        //     }\r\n        //     subModel = replacementSubModel;\r\n        // }\r\n        let nextPosition = transformPoint(subModelDesc.p);\r\n        // let nextRotation = createMatrix3.createEmpty();\r\n        // nextRotation = createMatrix3.multiplyMatrices(rotation, subModelDesc.r, nextRotation);\r\n        let nextRotation = Object(_LDRMatrix3__WEBPACK_IMPORTED_MODULE_1__[\"multiplyMatrices\"])(rotation, subModelDesc.r);\r\n        // subModel.generateThreePart(loader, subModelColor, nextPosition, nextRotation, subModelCull, subModelInversion, mc, subModelDesc, taskList);\r\n        subModel.generateThreePart(loader, subModelColor, nextPosition, nextRotation, mc, subModelDesc);\r\n    }\r\n\r\n    // Add submodels:\r\n    this.subModels.forEach(handleSubModel);\r\n}\n\n//# sourceURL=webpack://ldrRender1Service/./src/application_layer/LDRStep.js?");

/***/ }),

/***/ "./src/application_layer/LDRStructure.js":
/*!***********************************************!*\
  !*** ./src/application_layer/LDRStructure.js ***!
  \***********************************************/
/*! exports provided: Line2, Line3, Line4, Line5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Line2\", function() { return Line2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Line3\", function() { return Line3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Line4\", function() { return Line4; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Line5\", function() { return Line5; });\n\r\n// LDR.Line2 = function (c, p1, p2, tmp) {\r\nlet Line2 = function (c, p1, p2) {\r\n    this.c = c;\r\n    this.p1 = p1;\r\n    this.p2 = p2;\r\n    // this.tmp = tmp;\r\n}\r\n\r\n\r\n// LDR.Line3 = function (c, p1, p2, p3, cull, invert, tmp) {\r\nlet Line3 = function (c, p1, p2, p3) {\r\n    this.c = c;\r\n    // if (invert) {\r\n    //     this.p1 = p3;\r\n    //     this.p2 = p2;\r\n    //     this.p3 = p1;\r\n    // }\r\n    // else {\r\n    this.p1 = p1;\r\n    this.p2 = p2;\r\n    this.p3 = p3;\r\n    // }\r\n    // this.cull = cull;\r\n    // this.tmp = tmp;\r\n}\r\n\r\n\r\n// LDR.Line4 = function (c, p1, p2, p3, p4, cull, invert, tmp) {\r\nlet Line4 = function (c, p1, p2, p3, p4) {\r\n    this.c = c;\r\n    // if (invert) {\r\n    //     this.p1 = p4;\r\n    //     this.p2 = p3;\r\n    //     this.p3 = p2;\r\n    //     this.p4 = p1;\r\n    // }\r\n    // else {\r\n    this.p1 = p1;\r\n    this.p2 = p2;\r\n    this.p3 = p3;\r\n    this.p4 = p4;\r\n    // }\r\n    // this.cull = cull;\r\n    // this.tmp = tmp;\r\n}\r\n\r\n// LDR.Line5 = function (c, p1, p2, p3, p4, tmp) {\r\nlet Line5 = function (c, p1, p2, p3, p4) {\r\n    this.c = c;\r\n    this.p1 = p1;\r\n    this.p2 = p2;\r\n    this.p3 = p3;\r\n    this.p4 = p4;\r\n    // this.tmp = tmp;\r\n}\n\n//# sourceURL=webpack://ldrRender1Service/./src/application_layer/LDRStructure.js?");

/***/ }),

/***/ "./src/application_layer/LDRVector3.js":
/*!*********************************************!*\
  !*** ./src/application_layer/LDRVector3.js ***!
  \*********************************************/
/*! exports provided: create, getX, getY, getZ, applyMatrix3, add */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getX\", function() { return getX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getY\", function() { return getY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getZ\", function() { return getZ; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"applyMatrix3\", function() { return applyMatrix3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/* harmony import */ var _LDRMatrix3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LDRMatrix3 */ \"./src/application_layer/LDRMatrix3.js\");\n// TODO change to reason type\r\n\r\n\r\n\r\nlet create = (x, y, z) => {\r\n    return [x, y, z];\r\n}\r\n\r\nlet getX = ([x, y, z]) => x;\r\n\r\nlet getY = ([x, y, z]) => y;\r\n\r\nlet getZ = ([x, y, z]) => z;\r\n\r\nlet applyMatrix3 = (mat3, vec3) => {\r\n    let [a0, a1, a2, a3, a4, a5, a6, a7, a8] = Object(_LDRMatrix3__WEBPACK_IMPORTED_MODULE_0__[\"getElements\"])(mat3);\r\n    let [x, y, z] = vec3;\r\n\r\n    return create(\r\n        a0 * x + a3 * y + a6 * z,\r\n        a1 * x + a4 * y + a7 * z,\r\n        a2 * x + a5 * y + a8 * z\r\n    );\r\n}\r\n\r\n\r\nlet add = (v1, v2) => {\r\n    let [x1, y1, z1] = v1;\r\n    let [x2, y2, z2] = v2;\r\n\r\n    return create(\r\n        x1 + x2,\r\n        y1 + y2,\r\n        z1 + z2\r\n    );\r\n}\n\n//# sourceURL=webpack://ldrRender1Service/./src/application_layer/LDRVector3.js?");

/***/ }),

/***/ "./src/application_layer/LDRVector4.js":
/*!*********************************************!*\
  !*** ./src/application_layer/LDRVector4.js ***!
  \*********************************************/
/*! exports provided: create */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\n// TODO change to reason type\r\n\r\nlet create = (x, y, z, w) => {\r\n    return [x, y, z, w];\r\n}\n\n//# sourceURL=webpack://ldrRender1Service/./src/application_layer/LDRVector4.js?");

/***/ }),

/***/ "./src/application_layer/Log.js":
/*!**************************************!*\
  !*** ./src/application_layer/Log.js ***!
  \**************************************/
/*! exports provided: error */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"error\", function() { return error; });\nlet error = (error) => {\r\n    console.error(error);\r\n}\n\n//# sourceURL=webpack://ldrRender1Service/./src/application_layer/Log.js?");

/***/ }),

/***/ "./src/application_layer/colors.js":
/*!*****************************************!*\
  !*** ./src/application_layer/colors.js ***!
  \*****************************************/
/*! exports provided: LDRColors */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LDRColors\", function() { return LDRColors; });\n\r\n\r\n// import {LDR} from \"./LDR.js\";\r\n\r\n// var LDR = {};LDRColors = [];\r\nlet LDRColors = [];\r\n\r\nLDRColors[0] = { name: 'Black', value: 0x05131D, edge: 0x595959, lego_name: 'Black', lego_id: 26, bricklink_name: 'Black', bricklink_id: 11 };\r\nLDRColors[1] = { name: 'Blue', value: 0x0055BF, edge: 0x333333, lego_name: 'Bright Blue', lego_id: 23, bricklink_name: 'Blue', bricklink_id: 7 };\r\nLDRColors[2] = { name: 'Green', value: 0x257A3E, edge: 0x333333, lego_name: 'Dark Green', lego_id: 28, bricklink_name: 'Green', bricklink_id: 6 };\r\nLDRColors[3] = { name: 'Dark_Turquoise', value: 0x00838F, edge: 0x333333, lego_name: 'Bright Bluish Green', lego_id: 107, bricklink_name: 'Dark Turquoise', bricklink_id: 39 };\r\nLDRColors[4] = { name: 'Red', value: 0xC91A09, edge: 0x333333, lego_name: 'Bright Red', lego_id: 21, bricklink_name: 'Red', bricklink_id: 5 };\r\nLDRColors[5] = { name: 'Dark_Pink', value: 0xC870A0, edge: 0x333333, lego_name: 'Bright Purple', lego_id: 221, bricklink_name: 'Dark Pink', bricklink_id: 47 };\r\nLDRColors[6] = { name: 'Brown', value: 0x583927, edge: 0x1E1E1E, lego_name: 'Brown', lego_id: 217, bricklink_name: 'Brown', bricklink_id: 8 };\r\nLDRColors[7] = { name: 'Light_Grey', value: 0x9BA19D, edge: 0x333333, lego_name: 'Grey', lego_id: 2, bricklink_name: 'Light Gray', bricklink_id: 9 };\r\nLDRColors[8] = { name: 'Dark_Grey', value: 0x6D6E5C, edge: 0x333333, lego_name: 'Dark Grey', lego_id: 27, bricklink_name: 'Dark Gray', bricklink_id: 10 };\r\nLDRColors[9] = { name: 'Light_Blue', value: 0xB4D2E3, edge: 0x333333, lego_name: 'Light Blue', lego_id: 45, bricklink_name: 'Light Blue', bricklink_id: 62 };\r\nLDRColors[10] = { name: 'Bright_Green', value: 0x4B9F4A, edge: 0x333333, lego_name: 'Bright Green', lego_id: 37, bricklink_name: 'Bright Green', bricklink_id: 36 };\r\nLDRColors[11] = { name: 'Light_Turquoise', value: 0x55A5AF, edge: 0x333333, lego_name: 'Medium Bluish Green', lego_id: 116, bricklink_name: 'Light Turquoise', bricklink_id: 40 };\r\nLDRColors[12] = { name: 'Salmon', value: 0xF2705E, edge: 0x333333, lego_name: 'Medium Red', lego_id: 4, bricklink_name: 'Salmon', bricklink_id: 25 };\r\nLDRColors[13] = { name: 'Pink', value: 0xFC97AC, edge: 0x333333, lego_name: 'Light Reddish Violet', lego_id: 9, bricklink_name: 'Pink', bricklink_id: 23 };\r\nLDRColors[14] = { name: 'Yellow', value: 0xF2CD37, edge: 0x333333, lego_name: 'Bright Yellow', lego_id: 24, bricklink_name: 'Yellow', bricklink_id: 3 };\r\nLDRColors[15] = { name: 'White', value: 0xFFFFFF, edge: 0x333333, lego_name: 'White', lego_id: 1, bricklink_name: 'White', bricklink_id: 1 };\r\nLDRColors[16] = { name: 'Main_Colour', value: 0xFFFF80, edge: 0x333333 };\r\nLDRColors[17] = { name: 'Light_Green', value: 0xC2DAB8, edge: 0x333333, lego_name: 'Light Green', lego_id: 6, bricklink_name: 'Light Green', bricklink_id: 38 };\r\nLDRColors[18] = { name: 'Light_Yellow', value: 0xFBE696, edge: 0x333333, lego_name: 'Light Yellow', lego_id: 3, bricklink_name: 'Light Yellow', bricklink_id: 33 };\r\nLDRColors[19] = { name: 'Tan', value: 0xF4DC96, edge: 0x333333, lego_name: 'Brick Yellow', lego_id: 5, bricklink_name: 'Tan', bricklink_id: 2 };\r\nLDRColors[20] = { name: 'Light_Violet', value: 0xC9CAE2, edge: 0x333333, lego_name: 'Light Bluish Violet', lego_id: 39, bricklink_name: 'Light Violet', bricklink_id: 44 };\r\nLDRColors[21] = { name: 'Glow_In_Dark_Opaque', value: 0xE0FFB0, edge: 0xA4C374, lego_name: 'Phosphorescent Green', lego_id: 294, bricklink_name: 'Glow In Dark Opaque', bricklink_id: 46, alpha: 240, luminance: 15 };\r\nLDRColors[22] = { name: 'Purple', value: 0x81007B, edge: 0x333333, lego_name: 'Bright Violet', lego_id: 104, bricklink_name: 'Purple', bricklink_id: 24 };\r\nLDRColors[23] = { name: 'Dark_Blue_Violet', value: 0x2032B0, edge: 0x1E1E1E, lego_name: 'Dark Royal Blue', lego_id: 196, bricklink_name: 'Dark Blue-Violet', bricklink_id: 109 };\r\nLDRColors[24] = { name: 'Edge_Colour', value: 0x7F7F7F, edge: 0x333333 };\r\nLDRColors[25] = { name: 'Orange', value: 0xFE8A18, edge: 0x333333, lego_name: 'Bright Orange', lego_id: 106, bricklink_name: 'Orange', bricklink_id: 4 };\r\nLDRColors[26] = { name: 'Magenta', value: 0x901F76, edge: 0x333333, lego_name: 'Bright Reddish Violet', lego_id: 124, bricklink_name: 'Magenta', bricklink_id: 71 };\r\nLDRColors[27] = { name: 'Lime', value: 0xBBE90B, edge: 0x333333, lego_name: 'Bright Yellowish Green', lego_id: 119, bricklink_name: 'Lime', bricklink_id: 34 };\r\nLDRColors[28] = { name: 'Dark_Tan', value: 0x958A73, edge: 0x333333, lego_name: 'Sand Yellow', lego_id: 138, bricklink_name: 'Dark Tan', bricklink_id: 69 };\r\nLDRColors[29] = { name: 'Bright_Pink', value: 0xE4ADC8, edge: 0x333333, lego_name: 'Light Purple', lego_id: 222, bricklink_name: 'Bright Pink', bricklink_id: 104 };\r\nLDRColors[30] = { name: 'Medium_Lavender', value: 0xAC78BA, edge: 0x333333, lego_name: 'Medium Lavender', lego_id: 324, bricklink_name: 'Medium Lavender', bricklink_id: 157 };\r\nLDRColors[31] = { name: 'Lavender', value: 0xE1D5ED, edge: 0x333333, lego_name: 'Lavender', lego_id: 325, bricklink_name: 'Lavender', bricklink_id: 154 };\r\nLDRColors[32] = { name: 'Trans_Black_IR_Lens', value: 0x000000, edge: 0x333333, lego_name: 'Black IR', lego_id: 109, alpha: 210 };\r\nLDRColors[33] = { name: 'Trans_Dark_Blue', value: 0x0020A0, edge: 0x000064, lego_name: 'Transparent Blue', lego_id: 43, bricklink_name: 'Trans-Dark Blue', bricklink_id: 14, alpha: 128 };\r\nLDRColors[34] = { name: 'Trans_Green', value: 0x237841, edge: 0x1E6239, lego_name: 'Transparent Green', lego_id: 48, bricklink_name: 'Trans-Green', bricklink_id: 20, alpha: 128 };\r\nLDRColors[35] = { name: 'Trans_Bright_Green', value: 0x56E646, edge: 0x9DA86B, lego_name: '227 - Transparent Bright Green / Transparent Bright Yellowish Green', lego_id: 311, bricklink_name: 'Trans-Bright Green', bricklink_id: 108, alpha: 128 };\r\nLDRColors[36] = { name: 'Trans_Red', value: 0xC91A09, edge: 0x880000, lego_name: 'Transparent Red', lego_id: 41, bricklink_name: 'Trans-Red', bricklink_id: 17, alpha: 128 };\r\nLDRColors[37] = { name: 'Trans_Dark_Pink', value: 0xDF6695, edge: 0xA32A59, lego_name: 'Transparent Medium Reddish Violet', lego_id: 113, bricklink_name: 'Trans-Dark Pink', bricklink_id: 50, alpha: 128 };\r\nLDRColors[38] = { name: 'Trans_Neon_Orange', value: 0xFF800D, edge: 0xBD2400, lego_name: 'Transparent Fluorescent Reddish Orange', lego_id: 47, bricklink_name: 'Trans-Neon Orange', bricklink_id: 18, alpha: 128 };\r\nLDRColors[39] = { name: 'Trans_Very_Light_Blue', value: 0xC1DFF0, edge: 0x85A3B4, lego_name: 'Transparent Light Bluish Green', lego_id: 229, bricklink_name: 'Trans-Very Lt Blue', bricklink_id: 113, alpha: 128 };\r\nLDRColors[40] = { name: 'Trans_Black', value: 0x635F52, edge: 0x171316, lego_name: 'Transparent Brown', lego_id: 111, bricklink_name: 'Trans-Black', bricklink_id: 13, alpha: 128 };\r\nLDRColors[41] = { name: 'Trans_Medium_Blue', value: 0x559AB7, edge: 0x196973, lego_name: 'Transparent Fluorescent Blue', lego_id: 143, bricklink_name: 'Trans-Medium Blue', bricklink_id: 74, alpha: 128 };\r\nLDRColors[42] = { name: 'Trans_Neon_Green', value: 0xC0FF00, edge: 0x84C300, lego_name: 'Transparent Fluorescent Green', lego_id: 49, bricklink_name: 'Trans-Neon Green', bricklink_id: 16, alpha: 128 };\r\nLDRColors[43] = { name: 'Trans_Light_Blue', value: 0xAEE9EF, edge: 0x72B3B0, lego_name: 'Transparent Light Blue', lego_id: 42, bricklink_name: 'Trans-Light Blue', bricklink_id: 15, alpha: 128 };\r\nLDRColors[44] = { name: 'Trans_Bright_Reddish_Lilac', value: 0x96709F, edge: 0x5A3463, lego_name: 'Transparent Bright Reddish Lilac', lego_id: 236, bricklink_name: 'Trans-Light Purple', bricklink_id: 114, alpha: 128 };\r\nLDRColors[45] = { name: 'Trans_Pink', value: 0xFC97AC, edge: 0xA8718C, lego_name: 'Transparent Bright Pink', lego_id: 230, bricklink_name: 'Trans-Pink', bricklink_id: 107, alpha: 128 };\r\nLDRColors[46] = { name: 'Trans_Yellow', value: 0xF5CD2F, edge: 0x8E7400, lego_name: 'Transparent Yellow', lego_id: 44, bricklink_name: 'Trans-Yellow', bricklink_id: 19, alpha: 128 };\r\nLDRColors[47] = { name: 'Trans_Clear', value: 0xFCFCFC, edge: 0xC3C3C3, lego_name: 'Transparent', lego_id: 40, bricklink_name: 'Trans-Clear', bricklink_id: 12, alpha: 128 };\r\nLDRColors[52] = { name: 'Trans_Purple', value: 0xA5A5CB, edge: 0x280025, lego_name: 'Transparent Bright Bluish Violet', lego_id: 126, bricklink_name: 'Trans-Purple', bricklink_id: 51, alpha: 128 };\r\nLDRColors[54] = { name: 'Trans_Neon_Yellow', value: 0xDAB000, edge: 0xC3BA3F, lego_name: 'Transparent Fluorescent Yellow', lego_id: 157, bricklink_name: 'Trans-Neon Yellow', bricklink_id: 121, alpha: 128 };\r\nLDRColors[57] = { name: 'Trans_Orange', value: 0xF08F1C, edge: 0xA45C28, lego_name: 'Trans Bright Orange', lego_id: 182, bricklink_name: 'Trans-Orange', bricklink_id: 98, alpha: 128 };\r\nLDRColors[60] = { name: 'Chrome_Antique_Brass', value: 0x645A4C, edge: 0x281E10, lego_name: 'Metallic Earth Orange', lego_id: 187, bricklink_name: 'Chrome Antique Brass', bricklink_id: 57, material: 'CHROME' };\r\nLDRColors[61] = { name: 'Chrome_Blue', value: 0x6C96BF, edge: 0x202A68, lego_name: 'Metallic Bright Blue', lego_id: 185, bricklink_name: 'Chrome Blue', bricklink_id: 52, material: 'CHROME' };\r\nLDRColors[62] = { name: 'Chrome_Green', value: 0x3CB371, edge: 0x007735, lego_name: 'Metallic Dark Green', lego_id: 147, bricklink_name: 'Chrome Green', bricklink_id: 64, material: 'CHROME' };\r\nLDRColors[63] = { name: 'Chrome_Pink', value: 0xAA4D8E, edge: 0x6E1152, bricklink_name: 'Chrome Pink', bricklink_id: 82, material: 'CHROME' };\r\nLDRColors[64] = { name: 'Chrome_Black', value: 0x1B2A34, edge: 0x595959, bricklink_name: 'Chrome Black', bricklink_id: 122, material: 'CHROME' };\r\nLDRColors[65] = { name: 'Rubber_Yellow', value: 0xF5CD2F, edge: 0x333333, material: 'RUBBER' };\r\nLDRColors[66] = { name: 'Rubber_Trans_Yellow', value: 0xCAB000, edge: 0x8E7400, alpha: 128, material: 'RUBBER' };\r\nLDRColors[67] = { name: 'Rubber_Trans_Clear', value: 0xFFFFFF, edge: 0xC3C3C3, alpha: 128, material: 'RUBBER' };\r\nLDRColors[68] = { name: 'Very_Light_Orange', value: 0xF3CF9B, edge: 0x333333, lego_name: 'Light Yellowish Orange', lego_id: 36, bricklink_name: 'Very Light Orange', bricklink_id: 96 };\r\nLDRColors[69] = { name: 'Bright_Reddish_Lilac', value: 0xCD6298, edge: 0x333333, lego_name: 'Bright Reddish Lilac', lego_id: 198, bricklink_name: 'Light Purple', bricklink_id: 93 };\r\nLDRColors[70] = { name: 'Reddish_Brown', value: 0x582A12, edge: 0x595959, lego_name: 'Reddish Brown', lego_id: 192, bricklink_name: 'Reddish Brown', bricklink_id: 88 };\r\nLDRColors[71] = { name: 'Light_Bluish_Grey', value: 0xA0A5A9, edge: 0x333333, lego_name: 'Medium Stone Grey', lego_id: 194, bricklink_name: 'Light Bluish Gray', bricklink_id: 86 };\r\nLDRColors[72] = { name: 'Dark_Bluish_Grey', value: 0x6C6E68, edge: 0x333333, lego_name: 'Dark Stone Grey', lego_id: 199, bricklink_name: 'Dark Bluish Gray', bricklink_id: 85 };\r\nLDRColors[73] = { name: 'Medium_Blue', value: 0x5C9DD1, edge: 0x333333, lego_name: 'Medium Blue', lego_id: 102, bricklink_name: 'Medium Blue', bricklink_id: 42 };\r\nLDRColors[74] = { name: 'Medium_Green', value: 0x73DCA1, edge: 0x333333, lego_name: 'Medium Green', lego_id: 29, bricklink_name: 'Medium Green', bricklink_id: 37 };\r\nLDRColors[75] = { name: 'Speckle_Black_Copper', value: 0xAB6038, edge: 0xAB6038, bricklink_name: 'Speckle Black-Copper', bricklink_id: 116, material: 'MATERIAL SPECKLE FRACTION 0.4 MINSIZE 1 MAXSIZE 3' };\r\nLDRColors[76] = { name: 'Speckle_Dark_Bluish_Grey_Silver', value: 0x898788, edge: 0x898788, bricklink_name: 'Speckle DBGray-Silver', bricklink_id: 117, material: 'MATERIAL SPECKLE FRACTION 0.4 MINSIZE 1 MAXSIZE 3' };\r\nLDRColors[77] = { name: 'Light_Pink', value: 0xFECCCF, edge: 0x333333, lego_name: 'Light Pink', lego_id: 223, bricklink_name: 'Light Pink', bricklink_id: 56 };\r\nLDRColors[78] = { name: 'Light_Flesh', value: 0xF6D7B3, edge: 0x333333, lego_name: 'Light Nougat', lego_id: 283, bricklink_name: 'Light Flesh', bricklink_id: 90 };\r\nLDRColors[79] = { name: 'Milky_White', value: 0xFFFFFF, edge: 0xC3C3C3, lego_name: 'Nature', lego_id: 20, bricklink_name: 'Milky White', bricklink_id: 60, alpha: 240 };\r\nLDRColors[80] = { name: 'Metallic_Silver', value: 0xA5A9B4, edge: 0x333333, lego_name: '336 - Cool Silver Drum Lacq / Silver Ink', lego_id: 315, bricklink_name: 'Metallic Silver', bricklink_id: 67, material: 'METAL' };\r\nLDRColors[81] = { name: 'Metallic_Green', value: 0x899B5F, edge: 0x333333, lego_name: 'Lemon Metallic', lego_id: 200, bricklink_name: 'Metallic Green', bricklink_id: 70, material: 'METAL' };\r\nLDRColors[82] = { name: 'Metallic_Gold', value: 0xDBAC34, edge: 0x333333, lego_name: '335 - Warm Gold Drum Lacq / Gold Ink', lego_id: 310, bricklink_name: 'Metallic Gold', bricklink_id: 65, material: 'METAL' };\r\nLDRColors[83] = { name: 'Metallic_Black', value: 0x1A2831, edge: 0x333333, lego_name: 'Metallic Black', lego_id: 149, bricklink_name: 'Pearl Dark Gray', bricklink_id: 77, material: 'METAL' };\r\nLDRColors[84] = { name: 'Medium_Dark_Flesh', value: 0xCC702A, edge: 0x333333, lego_name: 'Dark Orange', lego_id: 38, bricklink_name: 'Medium Dark Flesh', bricklink_id: 150 };\r\nLDRColors[85] = { name: 'Medium_Lilac', value: 0x3F3691, edge: 0x1E1E1E, lego_name: 'Medium Lilac', lego_id: 268, bricklink_name: 'Dark Purple', bricklink_id: 89 };\r\nLDRColors[86] = { name: 'Dark_Flesh', value: 0x7C503A, edge: 0x333333, lego_name: 'Medium Nougat', lego_id: 312, bricklink_name: 'Dark Flesh', bricklink_id: 91 };\r\nLDRColors[87] = { name: 'Metallic_Dark_Grey', value: 0x6D6E5C, edge: 0x333333, lego_name: 'Titanium', lego_id: 309, bricklink_name: 'Pearl Dark Gray', bricklink_id: 77, material: 'METAL' };\r\nLDRColors[89] = { name: 'Blue_Violet', value: 0x4C61DB, edge: 0x333333, lego_name: 'Medium Royal Blue', bricklink_name: 'Blue-Violet', lego_id: 195 };\r\nLDRColors[92] = { name: 'Flesh', value: 0xF5A949, edge: 0x333333, lego_name: 'Nougat', lego_id: 18, bricklink_name: 'Flesh', bricklink_id: 28 };\r\nLDRColors[100] = { name: 'Light_Salmon', value: 0xFEBABD, edge: 0x333333, lego_name: 'Light Red', lego_id: 100, bricklink_name: 'Light Salmon', bricklink_id: 26 };\r\nLDRColors[110] = { name: 'Violet', value: 0x4354A3, edge: 0x333333, lego_name: 'Bright Bluish Violet', lego_id: 110, bricklink_name: 'Violet', bricklink_id: 43 };\r\nLDRColors[112] = { name: 'Medium_Violet', value: 0x6874CA, edge: 0x333333, lego_name: 'Medium Bluish Violet', lego_id: 112, bricklink_name: 'Medium Violet', bricklink_id: 73 };\r\nLDRColors[114] = { name: 'Glitter_Trans_Dark_Pink', value: 0x923978, edge: 0x9A2A66, lego_name: 'Tr. Medium Reddish-Violet w. Glitter 2%', lego_id: 114, bricklink_name: 'Glitter Trans-Dark Pink', bricklink_id: 100, alpha: 128, material: 'MATERIAL GLITTER FRACTION 0.17 VFRACTION 0.2 SIZE 1' };\r\nLDRColors[115] = { name: 'Medium_Lime', value: 0xC7D23C, edge: 0x333333, lego_name: 'Medium Yellowish Green', lego_id: 115, bricklink_name: 'Medium Lime', bricklink_id: 76 };\r\nLDRColors[117] = { name: 'Glitter_Trans_Clear', value: 0xFFFFFF, edge: 0xC3C3C3, lego_name: 'Transparent Glitter', lego_id: 117, bricklink_name: 'Glitter Trans-Clear', bricklink_id: 101, alpha: 128, material: 'MATERIAL GLITTER FRACTION 0.08 VFRACTION 0.1 SIZE 1' };\r\nLDRColors[118] = { name: 'Aqua', value: 0xB3D7D1, edge: 0x333333, lego_name: 'Light Bluish Green', lego_id: 118, bricklink_name: 'Aqua', bricklink_id: 41 };\r\nLDRColors[120] = { name: 'Light_Lime', value: 0xD9E4A7, edge: 0x333333, lego_name: 'Light Yellowish Green', lego_id: 120, bricklink_name: 'Light Lime', bricklink_id: 35 };\r\nLDRColors[125] = { name: 'Light_Orange', value: 0xF9BA61, edge: 0x333333, lego_name: 'Light Orange', lego_id: 125, bricklink_name: 'Light Orange', bricklink_id: 32 };\r\nLDRColors[128] = { name: 'Dark_Nougat', value: 0xAD6140, edge: 0x333333, lego_name: 'Dark Nougat', lego_id: 128, bricklink_name: 'Earth Orange', bricklink_id: 29 };\r\nLDRColors[129] = { name: 'Glitter_Trans_Purple', value: 0x8C00FF, edge: 0x280025, lego_name: 'Tr. Bright Bluish Violet w. Glitter 2%', lego_id: 129, bricklink_name: 'Glitter Trans-Purple', bricklink_id: 102, alpha: 128, material: 'MATERIAL GLITTER FRACTION 0.3 VFRACTION 0.4 SIZE 1' };\r\nLDRColors[132] = { name: 'Speckle_Black_Silver', value: 0x898788, edge: 0x898788, bricklink_name: 'Speckle Black-Silver', bricklink_id: 111, material: 'MATERIAL SPECKLE FRACTION 0.4 MINSIZE 1 MAXSIZE 3' };\r\nLDRColors[133] = { name: 'Speckle_Black_Gold', value: 0xDBAC34, edge: 0xDBAC34, lego_name: 'Black Glitter', lego_id: 132, bricklink_name: 'Speckle Black-Gold', bricklink_id: 151, material: 'MATERIAL SPECKLE FRACTION 0.4 MINSIZE 1 MAXSIZE 3' };\r\nLDRColors[134] = { name: 'Copper', value: 0x964A27, edge: 0x333333, lego_name: 'Copper', lego_id: 139, bricklink_name: 'Copper', bricklink_id: 84, material: 'PEARLESCENT' };\r\nLDRColors[135] = { name: 'Pearl_Light_Grey', value: 0x9CA3A8, edge: 0x333333, lego_name: '296 / 131 / 315 - Silver Flip-flop / Cool Silver / Silver / Silver Metallic', lego_id: 179, bricklink_name: 'Pearl Light Gray', bricklink_id: 66, material: 'PEARLESCENT' };\r\nLDRColors[137] = { name: 'Metal_Blue', value: 0x5677BA, edge: 0x333333, lego_name: 'Sand Blue Metallic', lego_id: 145, bricklink_name: 'Metal Blue', bricklink_id: 78, material: 'PEARLESCENT' };\r\nLDRColors[142] = { name: 'Pearl_Light_Gold', value: 0xDCBE61, edge: 0x333333, lego_name: 'Gold', lego_id: 127, bricklink_name: 'Pearl Light Gold', bricklink_id: 61, material: 'PEARLESCENT' };\r\nLDRColors[148] = { name: 'Pearl_Dark_Grey', value: 0x575857, edge: 0x333333, lego_name: 'Metallic Dark Grey', lego_id: 148, bricklink_name: 'Pearl Dark Gray', bricklink_id: 77, material: 'PEARLESCENT' };\r\nLDRColors[150] = { name: 'Pearl_Very_Light_Grey', value: 0xBBBDBC, edge: 0x333333, lego_name: 'Metallic Light Grey', lego_id: 150, bricklink_name: 'Pearl Very Light Gray', bricklink_id: 119, material: 'PEARLESCENT' };\r\nLDRColors[151] = { name: 'Very_Light_Bluish_Grey', value: 0xE6E3E0, edge: 0x333333, lego_name: 'Light Stone Grey', lego_id: 208, bricklink_name: 'Very Light Bluish Gray', bricklink_id: 99 };\r\nLDRColors[178] = { name: 'Flat_Dark_Gold', value: 0xB4883E, edge: 0x333333, lego_name: 'Metallic Sand Yellow', lego_id: 147, bricklink_name: 'Flat Dark Gold', bricklink_id: 81, material: 'PEARLESCENT' };\r\nLDRColors[179] = { name: 'Flat_Silver', value: 0x898788, edge: 0x333333, lego_name: 'Silver', lego_id: 131, bricklink_name: 'Flat Silver', bricklink_id: 95, material: 'PEARLESCENT' };\r\nLDRColors[183] = { name: 'Pearl_White', value: 0xF2F3F2, edge: 0x333333, lego_name: 'Metallic White', lego_id: 183, bricklink_name: 'Pearl White', bricklink_id: 83, material: 'PEARLESCENT' };\r\nLDRColors[184] = { name: 'Metallic_Bright_Red', value: 0xD60026, edge: 0x333333, lego_name: 'Metallic Bright Red', lego_id: 184, bricklink_name: 'Red', bricklink_id: 5, material: 'METAL' };\r\nLDRColors[186] = { name: 'Metallic_Dark_Green', value: 0x008E3C, edge: 0x333333, lego_name: 'Metallic Dark Green', lego_id: 186, bricklink_name: 'Green', bricklink_id: 6, material: 'METAL' };\r\nLDRColors[189] = { name: 'Reddish_Gold', value: 0xAC8247, edge: 0x333333, lego_name: 'Reddish Gold', lego_id: 189, material: 'PEARLESCENT' };\r\nLDRColors[191] = { name: 'Bright_Light_Orange', value: 0xF8BB3D, edge: 0x333333, lego_name: 'Flame Yellowish Orange', lego_id: 191, bricklink_name: 'Bright Light Orange', bricklink_id: 110 };\r\nLDRColors[212] = { name: 'Bright_Light_Blue', value: 0x86C1E1, edge: 0x333333, lego_name: 'Light Royal Blue', lego_id: 212, bricklink_name: 'Bright Light Blue', bricklink_id: 105 };\r\nLDRColors[216] = { name: 'Rust', value: 0xB31004, edge: 0x333333, lego_name: 'Rust', lego_id: 216, bricklink_name: 'Rust', bricklink_id: 27 };\r\nLDRColors[218] = { name: 'Reddish_Lilac', value: 0x8E5597, edge: 0x333333, lego_name: 'Reddish Lilac', lego_id: 218 };\r\nLDRColors[219] = { name: 'Lilac', value: 0x564E9D, edge: 0x333333, lego_name: 'Lilac', lego_id: 219, bricklink_name: 'Medium Violet', bricklink_id: 73 };\r\nLDRColors[226] = { name: 'Bright_Light_Yellow', value: 0xFFF03A, edge: 0x333333, lego_name: 'Cool Yellow', lego_id: 226, bricklink_name: 'Bright Light Yellow', bricklink_id: 103 };\r\nLDRColors[231] = { name: 'Trans_Bright_Light_Orange', value: 0xFCB76D, edge: 0xBD8951, lego_name: 'Transparent Flame Yellowish Orange', lego_id: 231, bricklink_name: 'Trans Light Orange', bricklink_id: 164, alpha: 128 };\r\nLDRColors[232] = { name: 'Sky_Blue', value: 0x56BED6, edge: 0x333333, lego_name: 'Dove Blue', lego_id: 232, bricklink_name: 'Sky Blue', bricklink_id: 87 };\r\nLDRColors[234] = { name: 'Trans_Fire_Yellow', value: 0xFBE890, edge: 0xBAAB6A, lego_name: 'Transparent Fire Yellow', lego_id: 234, alpha: 128 };\r\nLDRColors[256] = { name: 'Rubber_Black', value: 0x212121, edge: 0x595959, material: 'RUBBER' };\r\nLDRColors[272] = { name: 'Dark_Blue', value: 0x0D325B, edge: 0x1E1E1E, lego_name: 'Earth Blue', lego_id: 140, bricklink_name: 'Dark Blue', bricklink_id: 63 };\r\nLDRColors[273] = { name: 'Rubber_Blue', value: 0x0033B2, edge: 0x333333, material: 'RUBBER' };\r\nLDRColors[284] = { name: 'Trans_Reddish_Lilac', value: 0xC281A5, edge: 0x82566E, lego_name: 'Transparent Reddish Lilac', lego_id: 284, bricklink_name: 'Trans-Light Purple', bricklink_id: 114, alpha: 128 };\r\nLDRColors[285] = { name: 'Trans_Light_Green', value: 0x7DC291, edge: 0x52805F, lego_name: 'Transparent Light Green', lego_id: 285, alpha: 128 };\r\nLDRColors[288] = { name: 'Dark_Green', value: 0x184632, edge: 0x595959, lego_name: 'Earth Green', lego_id: 141, bricklink_name: 'Dark Green', bricklink_id: 80 };\r\nLDRColors[293] = { name: 'Trans_Light_Blue_Violet', value: 0x6BABE4, edge: 0x4D7BA3, lego_name: 'Transparent Light Royal Blue', lego_id: 293, alpha: 128 };\r\nLDRColors[294] = { name: 'Glow_In_Dark_Trans', value: 0xBDC6AD, edge: 0x818A71, lego_name: 'Phosphorescent White', lego_id: 50, bricklink_name: 'Glow In Dark Trans', bricklink_id: 118, alpha: 240, luminance: 15 };\r\nLDRColors[295] = { name: 'Flamingo_Pink', value: 0xFF94C2, edge: 0x333333, lego_name: 'Flamingo Pink', lego_id: 295 };\r\nLDRColors[297] = { name: 'Pearl_Gold', value: 0xCC9C2B, edge: 0x333333, lego_name: 'Warm Gold', lego_id: 297, bricklink_name: 'Pearl Gold', bricklink_id: 115, material: 'PEARLESCENT' };\r\nLDRColors[300] = { name: 'Metallic_Copper', value: 0xC27F53, edge: 0x333333, lego_name: '334 - Copper Drum Lacq / Copper Ink', lego_id: 300, material: 'METAL' };\r\nLDRColors[302] = { name: 'Glitter_Trans_Light_Blue', value: 0x923978, edge: 0x72B3B0, lego_name: 'Light Blue with Glitter 2%', lego_id: 302, bricklink_name: 'Glitter Trans-Light Blue', bricklink_id: 162, alpha: 128, material: 'MATERIAL GLITTER FRACTION 0.17 VFRACTION 0.2 SIZE 1' };\r\nLDRColors[308] = { name: 'Dark_Brown', value: 0x352100, edge: 0x595959, lego_name: 'Dark Brown', lego_id: 308, bricklink_name: 'Dark Brown', bricklink_id: 120 };\r\nLDRColors[313] = { name: 'Maersk_Blue', value: 0x54A9C8, edge: 0x333333, lego_name: 'Pastel Blue', lego_id: 11, bricklink_name: 'Maersk Blue', bricklink_id: 72 };\r\nLDRColors[320] = { name: 'Dark_Red', value: 0x720E0F, edge: 0x333333, lego_name: 'New Dark Red', lego_id: 154, bricklink_name: 'Dark Red', bricklink_id: 59 };\r\nLDRColors[321] = { name: 'Dark_Azure', value: 0x1498D7, edge: 0x333333, lego_name: 'Dark Azur', lego_id: 321, bricklink_name: 'Dark Azure', bricklink_id: 153 };\r\nLDRColors[322] = { name: 'Medium_Azure', value: 0x3EC2DD, edge: 0x333333, lego_name: 'Medium Azur', lego_id: 322, bricklink_name: 'Medium Azure', bricklink_id: 156 };\r\nLDRColors[323] = { name: 'Light_Aqua', value: 0xBDDCD8, edge: 0x333333, lego_name: 'Aqua', lego_id: 323, bricklink_name: 'Light Aqua', bricklink_id: 152 };\r\nLDRColors[324] = { name: 'Rubber_Red', value: 0xC40026, edge: 0x333333, material: 'RUBBER' };\r\nLDRColors[326] = { name: 'Yellowish_Green', value: 0xDFEEA5, edge: 0x333333, lego_name: 'Spring Yellowish Green', lego_id: 326 };\r\nLDRColors[329] = { name: 'Glow_In_Dark_White', value: 0xF5F3D7, edge: 0xB5B49F, lego_name: 'White Glow', lego_id: 329, bricklink_name: 'Glow in Dark White', bricklink_id: 159, alpha: 240, luminance: 15 };\r\nLDRColors[330] = { name: 'Olive_Green', value: 0x9B9A5A, edge: 0x333333, lego_name: 'Olive Green', lego_id: 330, bricklink_name: 'Olive Green', bricklink_id: 155 };\r\nLDRColors[334] = { name: 'Chrome_Gold', value: 0xBBA53D, edge: 0xBBB23D, lego_name: 'Metalized Gold', lego_id: 299, bricklink_name: 'Chrome Gold', bricklink_id: 21, material: 'CHROME' };\r\nLDRColors[335] = { name: 'Sand_Red', value: 0xD67572, edge: 0x333333, lego_name: 'Sand Red', lego_id: 153, bricklink_name: 'Sand Red', bricklink_id: 58 };\r\nLDRColors[339] = { name: 'Glitter_Trans_Neon_Green', value: 0x923978, edge: 0x84C300, lego_name: 'Fluorescent Green with Glitter 2%', lego_id: 339, bricklink_name: 'Glitter Trans-Neon Green', bricklink_id: 163, alpha: 128, material: 'MATERIAL GLITTER FRACTION 0.17 VFRACTION 0.2 SIZE 1' };\r\nLDRColors[350] = { name: 'Rubber_Orange', value: 0xD06610, edge: 0x333333, material: 'RUBBER' };\r\nLDRColors[351] = { name: 'Medium_Dark_Pink', value: 0xF785B1, edge: 0x333333, lego_name: 'Medium Reddish Violet', lego_id: 22, bricklink_name: 'Medium Dark Pink', bricklink_id: 94 };\r\nLDRColors[353] = { name: 'Coral', value: 0xFF6D77, edge: 0x333333, lego_name: 'Vibrant Coral', lego_id: 353 };\r\nLDRColors[366] = { name: 'Earth_Orange', value: 0x7B4A26, edge: 0x333333, lego_name: 'Earth Orange', lego_id: 25, bricklink_name: 'Earth Orange', bricklink_id: 29 };\r\nLDRColors[373] = { name: 'Sand_Purple', value: 0x845E84, edge: 0x333333, lego_name: 'Sand Violet', lego_id: 136, bricklink_name: 'Sand Purple', bricklink_id: 54 };\r\nLDRColors[375] = { name: 'Rubber_Light_Grey', value: 0xC1C2C1, edge: 0x333333, material: 'RUBBER' };\r\nLDRColors[378] = { name: 'Sand_Green', value: 0xA0BCAC, edge: 0x333333, lego_name: 'Sand Green', lego_id: 151, bricklink_name: 'Sand Green', bricklink_id: 48 };\r\nLDRColors[379] = { name: 'Sand_Blue', value: 0x597184, edge: 0x333333, lego_name: 'Sand Blue', lego_id: 135, bricklink_name: 'Sand Blue', bricklink_id: 55 };\r\nLDRColors[383] = { name: 'Chrome_Silver', value: 0xE0E0E0, edge: 0xA4A4A4, lego_name: 'Metalized Silver', lego_id: 298, bricklink_name: 'Chrome Silver', bricklink_id: 22, material: 'CHROME' };\r\nLDRColors[406] = { name: 'Rubber_Dark_Blue', value: 0x001D68, edge: 0x595959, material: 'RUBBER' };\r\nLDRColors[449] = { name: 'Rubber_Purple', value: 0x81007B, edge: 0x333333, material: 'RUBBER' };\r\nLDRColors[450] = { name: 'Fabuland_Brown', value: 0xD27744, edge: 0x333333, lego_name: 'Brick Red', lego_id: 12, bricklink_name: 'Fabuland Brown', bricklink_id: 106 };\r\nLDRColors[462] = { name: 'Medium_Orange', value: 0xFFA70B, edge: 0x333333, lego_name: 'Bright Yellowish Orange', lego_id: 105, bricklink_name: 'Medium Orange', bricklink_id: 31 };\r\nLDRColors[484] = { name: 'Dark_Orange', value: 0xA95500, edge: 0x333333, lego_name: 'Dark Orange', lego_id: 38, bricklink_name: 'Dark Orange', bricklink_id: 68 };\r\nLDRColors[490] = { name: 'Rubber_Lime', value: 0xD7F000, edge: 0x333333, material: 'RUBBER' };\r\nLDRColors[493] = { name: 'Magnet', value: 0x656761, edge: 0x595959, material: 'METAL' };\r\nLDRColors[494] = { name: 'Electric_Contact_Alloy', value: 0xD0D0D0, edge: 0x333333, material: 'METAL' };\r\nLDRColors[495] = { name: 'Electric_Contact_Copper', value: 0xAE7A59, edge: 0x333333, material: 'METAL' };\r\nLDRColors[496] = { name: 'Rubber_Light_Bluish_Grey', value: 0xA3A2A4, edge: 0x333333, material: 'RUBBER' };\r\nLDRColors[503] = { name: 'Very_Light_Grey', value: 0xE6E3DA, edge: 0x333333, lego_name: 'Light Grey', lego_id: 103, bricklink_name: 'Very Light Gray', bricklink_id: 49 };\r\nLDRColors[504] = { name: 'Rubber_Flat_Silver', value: 0x898788, edge: 0x333333, material: 'RUBBER' };\r\nLDRColors[507] = { name: 'Light_Orange_Brown', value: 0xFA9C1C, edge: 0x333333, lego_name: 'Light Orange Brown', lego_id: 12 };\r\nLDRColors[508] = { name: 'Fabuland_Red', value: 0xF26436, edge: 0x333333, lego_name: 'Red Orange', lego_id: 13 };\r\nLDRColors[509] = { name: 'Fabuland_Orange', value: 0xE79320, edge: 0x333333, lego_name: 'Light Brown', lego_id: 19 };\r\nLDRColors[510] = { name: 'Fabuland_Pastel_Green', value: 0xACE35E, edge: 0x333333, lego_name: 'Pastel Green', lego_id: 14 };\r\nLDRColors[511] = { name: 'Rubber_White', value: 0xFAFAFA, edge: 0x333333, material: 'RUBBER' };\r\nLDRColors[10002] = { name: 'Rubber_Green', value: 0x257A3E, edge: 0x333333, material: 'RUBBER' };\r\nLDRColors[10026] = { name: 'Rubber_Magenta', value: 0x901F76, edge: 0x333333, material: 'RUBBER' };\r\nLDRColors[10030] = { name: 'Rubber_Medium_Lavender', value: 0xAC78BA, edge: 0x333333, material: 'RUBBER' };\r\nLDRColors[10031] = { name: 'Rubber_Lavender', value: 0xE1D5ED, edge: 0x333333, material: 'RUBBER' };\r\nLDRColors[10070] = { name: 'Rubber_Reddish_Brown', value: 0x582A12, edge: 0x595959, material: 'RUBBER' };\r\nLDRColors[10226] = { name: 'Rubber_Bright_Light_Yellow', value: 0xFFF03A, edge: 0x333333, material: 'RUBBER' };\r\nLDRColors[10308] = { name: 'Rubber_Dark_Brown', value: 0x352100, edge: 0x595959, material: 'RUBBER' };\r\nLDRColors[10320] = { name: 'Rubber_Dark_Red', value: 0x720E0F, edge: 0x333333, material: 'RUBBER' };\r\nLDRColors[10321] = { name: 'Rubber_Dark_Azure', value: 0x1498D7, edge: 0x333333, material: 'RUBBER' };\r\nLDRColors[10322] = { name: 'Rubber_Medium_Azure', value: 0x3EC2DD, edge: 0x333333, material: 'RUBBER' };\r\nLDRColors[10323] = { name: 'Rubber_Light_Aqua', value: 0xBDDCD8, edge: 0x333333, material: 'RUBBER' };\r\nLDRColors[10484] = { name: 'Rubber_Dark_Orange', value: 0xA95500, edge: 0x333333, material: 'RUBBER' };\r\n\r\n\n\n//# sourceURL=webpack://ldrRender1Service/./src/application_layer/colors.js?");

/***/ }),

/***/ "./src/data_layer/POContainer.js":
/*!***************************************!*\
  !*** ./src/data_layer/POContainer.js ***!
  \***************************************/
/*! exports provided: getPO, setPO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPO\", function() { return getPO; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setPO\", function() { return setPO; });\nlet _poContainer = {\r\n    po: {\r\n        meshCollector: {\r\n            boundingBox: null\r\n        }\r\n    }\r\n}\r\n\r\nlet getPO = () => {\r\n    return _poContainer.po;\r\n};\r\n\r\nlet setPO = (po) => {\r\n    _poContainer = {\r\n        po\r\n    };\r\n};\r\n\n\n//# sourceURL=webpack://ldrRender1Service/./src/data_layer/POContainer.js?");

/***/ }),

/***/ "./src/domain_layer/repo/Repo.js":
/*!***************************************!*\
  !*** ./src/domain_layer/repo/Repo.js ***!
  \***************************************/
/*! exports provided: MeshCollector */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MeshCollector\", function() { return MeshCollector; });\n/* harmony import */ var _data_layer_POContainer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../data_layer/POContainer */ \"./src/data_layer/POContainer.js\");\n\r\n\r\nlet _getMeshCollector = () => {\r\n    return Object(_data_layer_POContainer__WEBPACK_IMPORTED_MODULE_0__[\"getPO\"])().meshCollector;\r\n};\r\n\r\nlet _setMeshCollector = (meshCollector) => {\r\n    Object(_data_layer_POContainer__WEBPACK_IMPORTED_MODULE_0__[\"setPO\"])(\r\n        {\r\n            ...Object(_data_layer_POContainer__WEBPACK_IMPORTED_MODULE_0__[\"getPO\"])(),\r\n            meshCollector\r\n        }\r\n    );\r\n};\r\n\r\nlet MeshCollector = {\r\n    getBoundingBox: () => {\r\n        return _getMeshCollector().boundingBox;\r\n    },\r\n    setBoundingBox: boundingBox => {\r\n        _setMeshCollector({\r\n            ..._getMeshCollector(),\r\n            boundingBox\r\n        })\r\n    }\r\n};\n\n//# sourceURL=webpack://ldrRender1Service/./src/domain_layer/repo/Repo.js?");

/***/ }),

/***/ "./src/external_layer/api/BuildAPI.js":
/*!********************************************!*\
  !*** ./src/external_layer/api/BuildAPI.js ***!
  \********************************************/
/*! exports provided: buildScene */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildScene\", function() { return buildScene; });\n/* harmony import */ var _application_layer_LDRPartType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../application_layer/LDRPartType */ \"./src/application_layer/LDRPartType.js\");\n/* harmony import */ var _application_layer_LDRLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../application_layer/LDRLoader */ \"./src/application_layer/LDRLoader.js\");\n/* harmony import */ var _application_layer_LDRMeshCollector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../application_layer/LDRMeshCollector */ \"./src/application_layer/LDRMeshCollector.js\");\n/* harmony import */ var _application_layer_LDRStep__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../application_layer/LDRStep */ \"./src/application_layer/LDRStep.js\");\n/* harmony import */ var _application_layer_LDRVector3__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../application_layer/LDRVector3 */ \"./src/application_layer/LDRVector3.js\");\n/* harmony import */ var _application_layer_LDRMatrix3__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../application_layer/LDRMatrix3 */ \"./src/application_layer/LDRMatrix3.js\");\n/* harmony import */ var _application_layer_LDRStructure__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../application_layer/LDRStructure */ \"./src/application_layer/LDRStructure.js\");\n/* harmony import */ var _domain_layer_repo_Repo__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../domain_layer/repo/Repo */ \"./src/domain_layer/repo/Repo.js\");\n// type partTypeData = {\r\n//     .\r\n//   \"ID\": LDRType.id,\r\n//   \"steps\": array(LDRStepType.t),\r\n// }\r\n// type allPartTypeDataMap = ImmutableHashMap.t(partTypeData);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet _convertToPartType = (partTypeData) => {\r\n    let partType = new _application_layer_LDRPartType__WEBPACK_IMPORTED_MODULE_0__[\"LDRPartType\"]();\r\n    partType.ID = partTypeData.ID;\r\n    partType.isPart = partTypeData.isPart;\r\n    partType.steps = partTypeData.steps.reduce((steps, {\r\n        hasPrimitives,\r\n        subModels,\r\n        lines,\r\n        conditionalLines,\r\n        triangles,\r\n        quads\r\n    }) => {\r\n        let step = new _application_layer_LDRStep__WEBPACK_IMPORTED_MODULE_3__[\"LDRStep\"]();\r\n        step.hasPrimitives = hasPrimitives;\r\n        step.subModels = subModels;\r\n        step.lines = lines.map(({ c, p1, p2 }) => {\r\n            return new _application_layer_LDRStructure__WEBPACK_IMPORTED_MODULE_6__[\"Line2\"](c, p1, p2);\r\n        });\r\n        step.conditionalLines = conditionalLines.map(({ c, p1, p2, p3, p4 }) => {\r\n            return new _application_layer_LDRStructure__WEBPACK_IMPORTED_MODULE_6__[\"Line5\"](c, p1, p2, p3, p4);\r\n        });\r\n        step.triangles = triangles.map(({ c, p1, p2, p3 }) => {\r\n            return new _application_layer_LDRStructure__WEBPACK_IMPORTED_MODULE_6__[\"Line3\"](c, p1, p2, p3);\r\n        });\r\n        step.quads = quads.map(({ c, p1, p2, p3, p4 }) => {\r\n            return new _application_layer_LDRStructure__WEBPACK_IMPORTED_MODULE_6__[\"Line4\"](c, p1, p2, p3, p4);\r\n        });\r\n\r\n        steps.push(step);\r\n        return steps;\r\n    }, []);\r\n\r\n    return partType;\r\n}\r\n\r\nlet buildScene = ([partTypeData, allPartTypeDataMap], [opaqueObject, sixteenObject, transObject], colorID) => {\r\n    // this.loadTexmaps();\r\n\r\n    // let mainModel = this.getMainModel();\r\n    let partType = _convertToPartType(partTypeData);\r\n\r\n    let loader = new _application_layer_LDRLoader__WEBPACK_IMPORTED_MODULE_1__[\"LDRLoader\"]();\r\n\r\n    let partTypes = {};\r\n    // TODO filter\r\n    for (let id in allPartTypeDataMap) {\r\n        if (allPartTypeDataMap.hasOwnProperty(id)) {\r\n            let partTypeData = allPartTypeDataMap[id];\r\n\r\n            partTypes[id] = _convertToPartType(partTypeData);\r\n        }\r\n    }\r\n\r\n    loader.partTypes = partTypes;\r\n\r\n\r\n\r\n    // Place model in scene:\r\n    let origo = Object(_application_layer_LDRVector3__WEBPACK_IMPORTED_MODULE_4__[\"create\"])(0.0, 0.0, 0.0);\r\n    let inv = Object(_application_layer_LDRMatrix3__WEBPACK_IMPORTED_MODULE_5__[\"create\"])(1, 0, 0, 0, -1, 0, 0, 0, -1);// Invert Y, and Z-axis for LDraw\r\n\r\n    // // Generate the meshes:\r\n    // if (this.cleanUpPrimitivesAndSubParts) {\r\n    //     mainModel.setReferencedFrom(this);\r\n    // }\r\n    // mainModel.generateThreePart(this, colorID, origo, inv, true, false, mc, null, taskList);\r\n    // mainModel.generateThreePart(this, colorID, origo, inv, mc, null);\r\n\r\n    // let [opaqueObject, sixteenObject, transObject] = getExternal().MeshCollector.getObjects();\r\n\r\n    let mc = new _application_layer_LDRMeshCollector__WEBPACK_IMPORTED_MODULE_2__[\"LDRMeshCollector\"](opaqueObject, sixteenObject, transObject);\r\n\r\n    partType.generateThreePart(loader, colorID, origo, inv, mc, null);\r\n\r\n    _domain_layer_repo_Repo__WEBPACK_IMPORTED_MODULE_7__[\"MeshCollector\"].setBoundingBox(mc.boundingBox);\r\n}\n\n//# sourceURL=webpack://ldrRender1Service/./src/external_layer/api/BuildAPI.js?");

/***/ }),

/***/ "./src/external_layer/api/ColorAPI.js":
/*!********************************************!*\
  !*** ./src/external_layer/api/ColorAPI.js ***!
  \********************************************/
/*! exports provided: getColorName, getColorLegoName, getColorBricklinkName */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getColorName\", function() { return getColorName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getColorLegoName\", function() { return getColorLegoName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getColorBricklinkName\", function() { return getColorBricklinkName; });\n/* harmony import */ var _application_layer_LDRColorManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../application_layer/LDRColorManager */ \"./src/application_layer/LDRColorManager.js\");\n\r\n\r\nlet getColorName = function (id) {\r\n    return Object(_application_layer_LDRColorManager__WEBPACK_IMPORTED_MODULE_0__[\"getColorObject\"])(id).name;\r\n}\r\n\r\nlet getColorLegoName = function (id) {\r\n    return Object(_application_layer_LDRColorManager__WEBPACK_IMPORTED_MODULE_0__[\"getColorObject\"])(id).lego_name;\r\n}\r\n\r\nlet getColorBricklinkName = function (id) {\r\n    return Object(_application_layer_LDRColorManager__WEBPACK_IMPORTED_MODULE_0__[\"getColorObject\"])(id).bricklink_name;\r\n}\n\n//# sourceURL=webpack://ldrRender1Service/./src/external_layer/api/ColorAPI.js?");

/***/ }),

/***/ "./src/external_layer/api/ExternalAPI.js":
/*!***********************************************!*\
  !*** ./src/external_layer/api/ExternalAPI.js ***!
  \***********************************************/
/*! exports provided: setRenderEngineExternal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setRenderEngineExternal\", function() { return setRenderEngineExternal; });\n/* harmony import */ var _render_engine_RenderEngineExternal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../render_engine/RenderEngineExternal */ \"./src/external_layer/render_engine/RenderEngineExternal.js\");\n\r\n\r\nlet setRenderEngineExternal = (external) => {\r\n    Object(_render_engine_RenderEngineExternal__WEBPACK_IMPORTED_MODULE_0__[\"setExternal\"])(external);\r\n};\n\n//# sourceURL=webpack://ldrRender1Service/./src/external_layer/api/ExternalAPI.js?");

/***/ }),

/***/ "./src/external_layer/api/MeshCollectorAPI.js":
/*!****************************************************!*\
  !*** ./src/external_layer/api/MeshCollectorAPI.js ***!
  \****************************************************/
/*! exports provided: getBoundingBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getBoundingBox\", function() { return getBoundingBox; });\n/* harmony import */ var _domain_layer_repo_Repo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../domain_layer/repo/Repo */ \"./src/domain_layer/repo/Repo.js\");\n\r\n\r\nlet getBoundingBox = () => {\r\n    return _domain_layer_repo_Repo__WEBPACK_IMPORTED_MODULE_0__[\"MeshCollector\"].getBoundingBox();\r\n}\n\n//# sourceURL=webpack://ldrRender1Service/./src/external_layer/api/MeshCollectorAPI.js?");

/***/ }),

/***/ "./src/external_layer/api/RenderAPI.js":
/*!*********************************************!*\
  !*** ./src/external_layer/api/RenderAPI.js ***!
  \*********************************************/
/*! exports provided: render */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony import */ var _render_engine_RenderEngineExternal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../render_engine/RenderEngineExternal */ \"./src/external_layer/render_engine/RenderEngineExternal.js\");\n\r\n\r\n// TODO refactor: remove renderer???\r\nlet render = (scene, camera, renderer) => {\r\n    Object(_render_engine_RenderEngineExternal__WEBPACK_IMPORTED_MODULE_0__[\"getExternal\"])().Renderer.render(scene, camera, renderer);\r\n};\n\n//# sourceURL=webpack://ldrRender1Service/./src/external_layer/api/RenderAPI.js?");

/***/ }),

/***/ "./src/external_layer/render_engine/RenderEngineExternal.js":
/*!******************************************************************!*\
  !*** ./src/external_layer/render_engine/RenderEngineExternal.js ***!
  \******************************************************************/
/*! exports provided: getExternal, setExternal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getExternal\", function() { return getExternal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setExternal\", function() { return setExternal; });\nlet _external = {};\r\n\r\nlet getExternal = () => _external;\r\n\r\nlet setExternal = (external) => {\r\n    _external = external;\r\n}\n\n//# sourceURL=webpack://ldrRender1Service/./src/external_layer/render_engine/RenderEngineExternal.js?");

/***/ })

/******/ });
});